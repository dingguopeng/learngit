<!-- doc/src/sgml/chkpass.sgml -->

<sect1 id="chkpass" xreflabel="chkpass">
<!--==========================orignal english content==========================
 <title>chkpass</title>
____________________________________________________________________________-->
 <title>chkpass</title>

<!--==========================orignal english content==========================
 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  This module implements a data type <type>chkpass</> that is
  designed for storing encrypted passwords.
  Each password is automatically converted to encrypted form upon entry,
  and is always stored encrypted.  To compare, simply compare against a clear
  text password and the comparison function will encrypt it before comparing.
 </para>
____________________________________________________________________________-->
 <para>
  这个模块实现了一种数据类型<type>chkpass</>，它被设计用来存储加密的口令。每一个口令被自动地转换为加密的形式，并且总是以加密形式存储。要比较，可简单地与一个明文口令比较，并且比较函数将会对明文口令先加密。
 </para>

<!--==========================orignal english content==========================
 <para>
  There are provisions in the code to report an error if the password is
  determined to be easily crackable.  However, this is currently just
  a stub that does nothing.
 </para>
____________________________________________________________________________-->
 <para>
  代码中规定如果口令被判断为容易被攻破，将会报告一个错误。但是，目前这里只是一个分支，它并不做任何事情。
 </para>

<!--==========================orignal english content==========================
 <para>
  If you precede an input string with a colon, it is assumed to be an
  already-encrypted password, and is stored without further encryption.
  This allows entry of previously-encrypted passwords.
 </para>
____________________________________________________________________________-->
 <para>
  如果你在一个输入字符串前放一个冒号，它就被假定为一个已加密的口令，并且在存储时不会被进一步加密。这个特性使得已经被加密的口令能够被录入。
 </para>

<!--==========================orignal english content==========================
 <para>
  On output, a colon is prepended.  This makes it possible to dump and reload
  passwords without re-encrypting them.  If you want the encrypted password
  without the colon then use the <function>raw()</> function.
  This allows you to use the
  type with things like Apache's <literal>Auth_PostgreSQL</> module.
 </para>
____________________________________________________________________________-->
 <para>
  在输出时，将会预先考虑冒号。这使得我们可以在转储和载入时不需要重新加密它们。如果你想要没有冒号的加密口令，则可使用<function>raw()</>函数。它允许你把该类型和类似Apache的<literal>Auth_PostgreSQL</>模块的东西一起使用。
 </para>

<!--==========================orignal english content==========================
 <para>
  The encryption uses the standard Unix function <function>crypt()</>,
  and so it suffers
  from all the usual limitations of that function; notably that only the
  first eight characters of a password are considered.
 </para>
____________________________________________________________________________-->
 <para>
  加密操作使用标准的Unix函数<function>crypt()</>，并且因此它也受到该函数的常见限制的影响；注意只有口令的前八个字符被考虑。
 </para>

<!--==========================orignal english content==========================
 <para>
  Note that the <type>chkpass</type> data type is not indexable.
  <!-&minus;
  I haven't worried about making this type indexable.  I doubt that anyone
  would ever need to sort a file in order of encrypted password.
  -&minus;>
 </para>
____________________________________________________________________________-->
 <para>
  注意<type>chkpass</type>数据类型是不能被索引的。
  <!--
  I haven't worried about making this type indexable.  I doubt that anyone
  would ever need to sort a file in order of encrypted password.
  -->
 </para>

<!--==========================orignal english content==========================
 <para>
  Sample usage:
 </para>
____________________________________________________________________________-->
 <para>
  使用例子：
 </para>

<!--==========================orignal english content==========================
<programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
-&minus;-&minus;-&minus;-&minus;-&minus;
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
-&minus;-&minus;-&minus;-&minus;-&minus;
 f
(1 row)
</programlisting>
____________________________________________________________________________-->
<programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
----------------
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
---------------
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
----------
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
----------
 f
(1 row)
</programlisting>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   D'Arcy J.M. Cain (<email>darcy@druid.net</email>)
  </para>
____________________________________________________________________________-->
  <para>
   D'Arcy J.M. Cain (<email>darcy@druid.net</email>)
  </para>
 </sect2>

</sect1>
