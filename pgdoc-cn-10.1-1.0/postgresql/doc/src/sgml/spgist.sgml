<!-- doc/src/sgml/spgist.sgml -->

<chapter id="SPGiST">
<!--==========================orignal english content==========================
<title>SP-GiST Indexes</title>
____________________________________________________________________________-->
<title>SP-GiST索引</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>index</primary>
    <secondary>SP-GiST</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>index</primary>
    <secondary>SP-GiST</secondary>
   </indexterm>

<sect1 id="spgist-intro">
<!--==========================orignal english content==========================
 <title>Introduction</title>
____________________________________________________________________________-->
 <title>简介</title>

<!--==========================orignal english content==========================
 <para>
  <acronym>SP-GiST</acronym> is an abbreviation for space-partitioned
  <acronym>GiST</acronym>.  <acronym>SP-GiST</acronym> supports partitioned
  search trees, which facilitate development of a wide range of different
  non-balanced data structures, such as quad-trees, k-d trees, and radix
  trees (tries).  The common feature of these structures is that they
  repeatedly divide the search space into partitions that need not be
  of equal size.  Searches that are well matched to the partitioning rule
  can be very fast.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>SP-GiST</acronym>是空间划分<acronym>GiST</acronym>（Space-partitioned GiST）的简称。<acronym>SP-GiST</acronym>支持划分搜索树，它们可用于开发许多各种不同的非平衡数据结构，例如四叉树、k-d树和单词查找树。这些结构的共同特征是它们反复地将搜索空间划分成大小不需要相等的分区。匹配这些划分规则的搜索将会很快。
 </para>

<!--==========================orignal english content==========================
 <para>
  These popular data structures were originally developed for in-memory
  usage.  In main memory, they are usually designed as a set of dynamically
  allocated nodes linked by pointers.  This is not suitable for direct
  storing on disk, since these chains of pointers can be rather long which
  would require too many disk accesses.  In contrast, disk-based data
  structures should have a high fanout to minimize I/O.  The challenge
  addressed by <acronym>SP-GiST</acronym> is to map search tree nodes to
  disk pages in such a way that a search need access only a few disk pages,
  even if it traverses many nodes.
 </para>
____________________________________________________________________________-->
 <para>
  这些常用的数据结构最初是为在内存中使用而设计的。在主存中，它们通常被设计为一组由指针链接的动态分配的结点。这对直接在磁盘上存储并不合适，因为这些指针链可能很长并且需要太多次的磁盘访问。相反，基于磁盘的数据结构应该具有高扇出来最小化 I/O。<acronym>SP-GiST</acronym>所提出的挑战是将搜索树结点映射到磁盘页面，这样即使是一次搜索会穿过很多结点，它也只需要访问很少的几个磁盘页面。
 </para>

<!--==========================orignal english content==========================
 <para>
  Like <acronym>GiST</acronym>, <acronym>SP-GiST</acronym> is meant to allow
  the development of custom data types with the appropriate access methods,
  by an expert in the domain of the data type, rather than a database expert.
 </para>
____________________________________________________________________________-->
 <para>
  和<acronym>GiST</acronym>一样，<acronym>SP-GiST</acronym>也打算允许带有合适访问方法的自定义数据类型的开发，这种开发只需由该数据类型的领域专家参与，而不需要数据库专家的参与。
 </para>

<!--==========================orignal english content==========================
 <para>
  Some of the information here is derived from Purdue University's
  SP-GiST Indexing Project
  <ulink url="http://www.cs.purdue.edu/spgist/">web site</ulink>.
  The <acronym>SP-GiST</acronym> implementation in
  <productname>PostgreSQL</productname> is primarily maintained by Teodor
  Sigaev and Oleg Bartunov, and there is more information on their
  <!-&minus; URL will be changed -&minus;>
  <ulink url="http://www.sai.msu.su/~megera/wiki/spgist_dev">web site</ulink>.
 </para>
____________________________________________________________________________-->
 <para>
  这里的一些信息是来自于普渡大学的 SP-GiST 索引项目<ulink url="http://www.cs.purdue.edu/spgist/">web site</ulink>。<productname>PostgreSQL</productname>中的<acronym>SP-GiST</acronym>实现主要由 Teodor Sigaev 和 Oleg Bartunov 维护，在他们的
  <!-- URL will be changed -->
  <ulink url="http://www.sai.msu.su/~megera/wiki/spgist_dev">网站</ulink>上有更多信息。
 </para>

</sect1>

<sect1 id="spgist-builtin-opclasses">
<!--==========================orignal english content==========================
 <title>Built-in Operator Classes</title>
____________________________________________________________________________-->
 <title>内建操作符类</title>

<!--==========================orignal english content==========================
 <para>
  The core <productname>PostgreSQL</> distribution
  includes the <acronym>SP-GiST</acronym> operator classes shown in
  <xref linkend="spgist-builtin-opclasses-table">.
 </para>
____________________________________________________________________________-->
 <para>
  <xref linkend="spgist-builtin-opclasses-table">中展示了<productname>PostgreSQL</>
  核心发布所包括的<acronym>SP-GiST</acronym>操作符类。
 </para>

  <table id="spgist-builtin-opclasses-table">
<!--==========================orignal english content==========================
   <title>Built-in <acronym>SP-GiST</acronym> Operator Classes</title>
____________________________________________________________________________-->
   <title>内建 <acronym>SP-GiST</acronym> 操作符类</title>
   <tgroup cols="3">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Name</entry>
      <entry>Indexed Data Type</entry>
      <entry>Indexable Operators</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>名称</entry>
      <entry>索引数据类型</entry>
      <entry>可索引操作符</entry>
     </row>
    </thead>
    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>kd_point_ops</></entry>
      <entry><type>point</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>&lt;^</>
       <literal>&gt;&gt;</>
       <literal>&gt;^</>
       <literal>~=</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>kd_point_ops</></entry>
      <entry><type>point</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>&lt;^</>
       <literal>&gt;&gt;</>
       <literal>&gt;^</>
       <literal>~=</>
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>quad_point_ops</></entry>
      <entry><type>point</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>&lt;^</>
       <literal>&gt;&gt;</>
       <literal>&gt;^</>
       <literal>~=</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>quad_point_ops</></entry>
      <entry><type>point</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>&lt;^</>
       <literal>&gt;&gt;</>
       <literal>&gt;^</>
       <literal>~=</>
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>range_ops</></entry>
      <entry>any range type</entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&gt;</>
       <literal>-|-</>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>&gt;&gt;</>
       <literal>@&gt;</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>range_ops</></entry>
      <entry>任何范围类型</entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&gt;</>
       <literal>-|-</>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>&gt;&gt;</>
       <literal>@&gt;</>
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>box_ops</></entry>
      <entry><type>box</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&gt;&gt;</>
       <literal>~=</>
       <literal>@&gt;</>
       <literal>&lt;@</>
       <literal>&amp;&lt;|</>
       <literal>&lt;&lt;|</>
       <literal>|&gt;&gt;</literal>
       <literal>|&amp;&gt;</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>box_ops</></entry>
      <entry><type>box</></entry>
      <entry>
       <literal>&lt;&lt;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&gt;&gt;</>
       <literal>~=</>
       <literal>@&gt;</>
       <literal>&lt;@</>
       <literal>&amp;&lt;|</>
       <literal>&lt;&lt;|</>
       <literal>|&gt;&gt;</literal>
       <literal>|&amp;&gt;</>
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>text_ops</></entry>
      <entry><type>text</></entry>
      <entry>
       <literal>&lt;</>
       <literal>&lt;=</>
       <literal>=</>
       <literal>&gt;</>
       <literal>&gt;=</>
       <literal>~&lt;=~</>
       <literal>~&lt;~</>
       <literal>~&gt;=~</>
       <literal>~&gt;~</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>text_ops</></entry>
      <entry><type>text</></entry>
      <entry>
       <literal>&lt;</>
       <literal>&lt;=</>
       <literal>=</>
       <literal>&gt;</>
       <literal>&gt;=</>
       <literal>~&lt;=~</>
       <literal>~&lt;~</>
       <literal>~&gt;=~</>
       <literal>~&gt;~</>
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>inet_ops</></entry>
      <entry><type>inet</>, <type>cidr</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&gt;&gt;</>
       <literal>&gt;&gt;=</>
       <literal>&gt;</>
       <literal>&gt;=</>
       <literal>&lt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;=</>
       <literal>&lt;</>
       <literal>&lt;=</>
       <literal>=</>
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>inet_ops</></entry>
      <entry><type>inet</>, <type>cidr</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&gt;&gt;</>
       <literal>&gt;&gt;=</>
       <literal>&gt;</>
       <literal>&gt;=</>
       <literal>&lt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;=</>
       <literal>&lt;</>
       <literal>&lt;=</>
       <literal>=</>
      </entry>
     </row>
	 </tbody>
   </tgroup>
  </table>

<!--==========================orignal english content==========================
 <para>
  Of the two operator classes for type <type>point</>,
  <literal>quad_point_ops</> is the default.  <literal>kd_point_ops</>
  supports the same operators but uses a different index data structure which
  may offer better performance in some applications.
 </para>
____________________________________________________________________________-->
 <para>
  在用于类型<type>point</>的两种操作符类中，<literal>quad_point_ops</>是默认值。<literal>kd_point_ops</>支持相同的操作符，但是使用一种不同的索引数据结构，在某些应用中它可以提供更好的性能。
 </para>

</sect1>

<sect1 id="spgist-extensibility">
<!--==========================orignal english content==========================
 <title>Extensibility</title>
____________________________________________________________________________-->
 <title>可扩展性</title>

<!--==========================orignal english content==========================
 <para>
  <acronym>SP-GiST</acronym> offers an interface with a high level of
  abstraction, requiring the access method developer to implement only
  methods specific to a given data type. The <acronym>SP-GiST</acronym> core
  is responsible for efficient disk mapping and searching the tree structure.
  It also takes care of concurrency and logging considerations.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>SP-GiST</acronym>提供了一个高抽象层次的接口，要求访问方法开发者实现与一个给定数据类型相关的几种方法。<acronym>SP-GiST</acronym>核心负责高效的磁盘映射和搜索树结构。它也会处理并发和日志。
 </para>

<!--==========================orignal english content==========================
 <para>
  Leaf tuples of an <acronym>SP-GiST</acronym> tree contain values of the
  same data type as the indexed column.  Leaf tuples at the root level will
  always contain the original indexed data value, but leaf tuples at lower
  levels might contain only a compressed representation, such as a suffix.
  In that case the operator class support functions must be able to
  reconstruct the original value using information accumulated from the
  inner tuples that are passed through to reach the leaf level.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>SP-GiST</acronym>树的叶子元组包含与被索引列数据类型相同的值。在根层的叶子元组总是包含原始的被索引数据值，但是在较下层的叶子元组可能只含有一个压缩后的表示，例如一个后缀。在这种情况下，操作符类支持函数必须能够使用从内部元组计算出来的信息重构出原始的值，这些内部元组指的是在到达叶子层的过程中穿过的元组。
 </para>

<!--==========================orignal english content==========================
 <para>
  Inner tuples are more complex, since they are branching points in the
  search tree.  Each inner tuple contains a set of one or more
  <firstterm>nodes</>, which represent groups of similar leaf values.
  A node contains a downlink that leads either to another, lower-level inner
  tuple, or to a short list of leaf tuples that all lie on the same index page.
  Each node normally has a <firstterm>label</> that describes it; for example,
  in a radix tree the node label could be the next character of the string
  value.  (Alternatively, an operator class can omit the node labels, if it
  works with a fixed set of nodes for all inner tuples;
  see <xref linkend="spgist-null-labels">.)
  Optionally, an inner tuple can have a <firstterm>prefix</> value
  that describes all its members.  In a radix tree this could be the common
  prefix of the represented strings.  The prefix value is not necessarily
  really a prefix, but can be any data needed by the operator class;
  for example, in a quad-tree it can store the central point that the four
  quadrants are measured with respect to.  A quad-tree inner tuple would
  then also contain four nodes corresponding to the quadrants around this
  central point.
 </para>
____________________________________________________________________________-->
 <para>
  内部元组更加复杂，因为它们是搜索树的分支点。每一个内部元组包含一个或者更多个<firstterm>结点</>，结点表示一个具有相似叶子值的组。一个结点包含一个向下的链接，这个链接可以导向另一个较下层的内部元组，或者是由位于同一索引页面的叶子元组组成的一个短列表。每一个结点通常还有一个<firstterm>标签</>来描述它，例如，在一个 radix 树中结点标签可以是串值的下一个字符（或者，如果一种操作符类对于所有内部元组使用一个固定的节点集合，则它可以省略节点标签，见<xref linkend="spgist-null-labels">）。可选地，一个内部元组可以有一个<firstterm>前缀</>值来描述它所有的成员。在一个 radix 树中前缀可以是所表示的串的公共前缀。前缀值并不一定非要是一个真正的前缀，它可以是操作符类需要的任何数据。例如，在一个四叉树中它可以存储用于划分四个象限的中心点。一个四叉树的内部元组则可以包含对应于围绕该中心点的象限的四个结点。
 </para>

<!--==========================orignal english content==========================
 <para>
  Some tree algorithms require knowledge of level (or depth) of the current
  tuple, so the <acronym>SP-GiST</acronym> core provides the possibility for
  operator classes to manage level counting while descending the tree.
  There is also support for incrementally reconstructing the represented
  value when that is needed, and for passing down additional data (called
  <firstterm>traverse values</>) during a tree descent.
 </para>
____________________________________________________________________________-->
 <para>
  某些树算法要求当前元组所在层（或深度）的知识，因此<acronym>SP-GiST</acronym>核心为操作符类提供了机会以便在沿着树下降时管理层计数。当需要重组被表示的值时，这也可以为增量地重构过程提供支持，这还可以为沿着树下降时向下层传递附加数据（称为<firstterm>贯穿值</>）提供支持。
 </para>

 <note>
<!--==========================orignal english content==========================
  <para>
   The <acronym>SP-GiST</acronym> core code takes care of null entries.
   Although <acronym>SP-GiST</acronym> indexes do store entries for nulls
   in indexed columns, this is hidden from the index operator class code:
   no null index entries or search conditions will ever be passed to the
   operator class methods.  (It is assumed that <acronym>SP-GiST</acronym>
   operators are strict and so cannot succeed for null values.)  Null values
   are therefore not discussed further here.
  </para>
____________________________________________________________________________-->
  <para>
   <acronym>SP-GiST</acronym>核心代码会关注空项。尽管<acronym>SP-GiST</acronym>索引确实可以存储被索引列中的空值，但这对索引操作符类代码是隐藏的：不会有空索引项或搜索条件会被传递给操作符类方法（我们假定<acronym>SP-GiST</acronym>操作符是严格的并且因此无法成功处理空值）。因此这里不会进一步讨论空值。
  </para>
 </note>

<!--==========================orignal english content==========================
 <para>
  There are five user-defined methods that an index operator class for
  <acronym>SP-GiST</acronym> must provide.  All five follow the convention
  of accepting two <type>internal</> arguments, the first of which is a
  pointer to a C struct containing input values for the support method,
  while the second argument is a pointer to a C struct where output values
  must be placed.  Four of the methods just return <type>void</>, since
  all their results appear in the output struct; but
  <function>leaf_consistent</> additionally returns a <type>boolean</> result.
  The methods must not modify any fields of their input structs.  In all
  cases, the output struct is initialized to zeroes before calling the
  user-defined method.
 </para>
____________________________________________________________________________-->
 <para>
  一个<acronym>SP-GiST</acronym>的索引操作符类必须提供五个用户定义的方法。所有五个方法都接受两个<type>内部</>参数，其中第一个是一个指针，它指向一个包含用于支持方法的值的 C 结构。而第二个参数也是一个指针，它指向将放置输出值的 C 结构。其中四个函数只返回<type>void</>，因为它们的所有结果都出现在输出结构中。但是<function>leaf_consistent</>会额外返回一个<type>boolean</>结果。这些方法不能修改它们的输入结构的任何域。在所有情况下，调用用户定义的方法之前输出结构都被初始化为零。
 </para>

<!--==========================orignal english content==========================
 <para>
  The five user-defined methods are:
 </para>
____________________________________________________________________________-->
 <para>
  五个用户定义的方法是：
 </para>

 <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><function>config</></term>
____________________________________________________________________________-->
     <term><function>config</></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Returns static information about the index implementation, including
       the data type OIDs of the prefix and node label data types.
      </para>
____________________________________________________________________________-->
      <para>
       返回关于索引实现的静态信息，包括前缀的数据类型的OID以及结点标签数据类型。
      </para>
<!--==========================orignal english content==========================
     <para>
      The <acronym>SQL</> declaration of the function must look like this:
<programlisting>
CREATE FUNCTION my_config(internal, internal) RETURNS void ...
</programlisting>
      The first argument is a pointer to a <structname>spgConfigIn</>
      C struct, containing input data for the function.
      The second argument is a pointer to a <structname>spgConfigOut</>
      C struct, which the function must fill with result data.
<programlisting>
typedef struct spgConfigIn
{
    Oid         attType;        /* Data type to be indexed */
} spgConfigIn;

typedef struct spgConfigOut
{
    Oid         prefixType;     /* Data type of inner-tuple prefixes */
    Oid         labelType;      /* Data type of inner-tuple node labels */
    bool        canReturnData;  /* Opclass can reconstruct original data */
    bool        longValuesOK;   /* Opclass can cope with values &gt; 1 page */
} spgConfigOut;
</programlisting>

      <structfield>attType</> is passed in order to support polymorphic
      index operator classes; for ordinary fixed-data-type operator classes, it
      will always have the same value and so can be ignored.
     </para>
____________________________________________________________________________-->
     <para>
      这个函数的<acronym>SQL</>声明必须看起来像这样：
<programlisting>
CREATE FUNCTION my_config(internal, internal) RETURNS void ...
</programlisting>
      第一个参数是一个指向<structname>spgConfigIn</> C 结构的指针，包含该函数的输入数据。第二个参数是一个指向<structname>spgConfigOut</> C 结构的指针，函数必须将结果数据填充在其中。
<programlisting>
typedef struct spgConfigIn
{
    Oid         attType;        /* 要被索引的数据类型 */
} spgConfigIn;

typedef struct spgConfigOut
{
    Oid         prefixType;     /* 内部元组前缀的数据类型 */
    Oid         labelType;      /* 内部元组结点标签的数据类型 */
    bool        canReturnData;  /* 操作符类能重构原始数据 */
    bool        longValuesOK;   /* 操作符类能处理值 &gt; 1 页 */
} spgConfigOut;
</programlisting>

      为了支持多态的索引操作符类，<structfield>attType</>要被传入；对于普通固定数据类型的操作符类，它将总是取相同的值，因此可以被忽略。
     </para>

<!--==========================orignal english content==========================
     <para>
      For operator classes that do not use prefixes,
      <structfield>prefixType</> can be set to <literal>VOIDOID</>.
      Likewise, for operator classes that do not use node labels,
      <structfield>labelType</> can be set to <literal>VOIDOID</>.
      <structfield>canReturnData</> should be set true if the operator class
      is capable of reconstructing the originally-supplied index value.
      <structfield>longValuesOK</> should be set true only when the
      <structfield>attType</> is of variable length and the operator
      class is capable of segmenting long values by repeated suffixing
      (see <xref linkend="spgist-limits">).
     </para>
____________________________________________________________________________-->
     <para>
      对于不使用前缀的操作符类，<structfield>prefixType</>可以被设置为<literal>VOIDOID</>。同样，对于不使用结点标签的操作符类，<structfield>labelType</>可以被设置为<literal>VOIDOID</>。如果操作符类能够重构出原来提供的被索引值，则<structfield>canReturnData</>应该被设置为真。只有当<structfield>attType</>是变长的并且操作符类能够将长值通过反复的添加后缀分段时，<structfield>longValuesOK</>才应当被设置为真（参见<xref linkend="spgist-limits">）。
     </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><function>choose</></term>
____________________________________________________________________________-->
     <term><function>choose</></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
        Chooses a method for inserting a new value into an inner tuple.
      </para>
____________________________________________________________________________-->
      <para>
        为将一个新值插入到一个内部元组选择一种方法。
      </para>

<!--==========================orignal english content==========================
     <para>
      The <acronym>SQL</> declaration of the function must look like this:
<programlisting>
CREATE FUNCTION my_choose(internal, internal) RETURNS void ...
</programlisting>
      The first argument is a pointer to a <structname>spgChooseIn</>
      C struct, containing input data for the function.
      The second argument is a pointer to a <structname>spgChooseOut</>
      C struct, which the function must fill with result data.
<programlisting>
typedef struct spgChooseIn
{
    Datum       datum;          /* original datum to be indexed */
    Datum       leafDatum;      /* current datum to be stored at leaf */
    int         level;          /* current level (counting from zero) */

    /* Data from current inner tuple */
    bool        allTheSame;     /* tuple is marked all-the-same? */
    bool        hasPrefix;      /* tuple has a prefix? */
    Datum       prefixDatum;    /* if so, the prefix value */
    int         nNodes;         /* number of nodes in the inner tuple */
    Datum      *nodeLabels;     /* node label values (NULL if none) */
} spgChooseIn;

typedef enum spgChooseResultType
{
    spgMatchNode = 1,           /* descend into existing node */
    spgAddNode,                 /* add a node to the inner tuple */
    spgSplitTuple               /* split inner tuple (change its prefix) */
} spgChooseResultType;

typedef struct spgChooseOut
{
    spgChooseResultType resultType;     /* action code, see above */
    union
    {
        struct                  /* results for spgMatchNode */
        {
            int         nodeN;      /* descend to this node (index from 0) */
            int         levelAdd;   /* increment level by this much */
            Datum       restDatum;  /* new leaf datum */
        }           matchNode;
        struct                  /* results for spgAddNode */
        {
            Datum       nodeLabel;  /* new node's label */
            int         nodeN;      /* where to insert it (index from 0) */
        }           addNode;
        struct                  /* results for spgSplitTuple */
        {
            /* Info to form new upper-level inner tuple with one child tuple */
            bool        prefixHasPrefix;    /* tuple should have a prefix? */
            Datum       prefixPrefixDatum;  /* if so, its value */
            int         prefixNNodes;       /* number of nodes */
            Datum      *prefixNodeLabels;   /* their labels (or NULL for
                                             * no labels) */
            int         childNodeN;         /* which node gets child tuple */

            /* Info to form new lower-level inner tuple with all old nodes */
            bool        postfixHasPrefix;   /* tuple should have a prefix? */
            Datum       postfixPrefixDatum; /* if so, its value */
        }           splitTuple;
    }           result;
} spgChooseOut;
</programlisting>

       <structfield>datum</> is the original datum that was to be inserted
       into the index.
       <structfield>leafDatum</> is initially the same as
       <structfield>datum</>, but can change at lower levels of the tree
       if the <function>choose</function> or <function>picksplit</function>
       methods change it.  When the insertion search reaches a leaf page,
       the current value of <structfield>leafDatum</> is what will be stored
       in the newly created leaf tuple.
       <structfield>level</> is the current inner tuple's level, starting at
       zero for the root level.
       <structfield>allTheSame</> is true if the current inner tuple is
       marked as containing multiple equivalent nodes
       (see <xref linkend="spgist-all-the-same">).
       <structfield>hasPrefix</> is true if the current inner tuple contains
       a prefix; if so,
       <structfield>prefixDatum</> is its value.
       <structfield>nNodes</> is the number of child nodes contained in the
       inner tuple, and
       <structfield>nodeLabels</> is an array of their label values, or
       NULL if there are no labels.
      </para>
____________________________________________________________________________-->
     <para>
      该函数的<acronym>SQL</>声明必须看起来像这样：
<programlisting>
CREATE FUNCTION my_choose(internal, internal) RETURNS void ...
</programlisting>
      第一个参数是一个指向<structname>spgChooseIn</> C 结构的指针，包含该函数的输入数据。第二个参数是一个指向<structname>spgChooseOut</> C 结构的指针，函数必须将结果数据填充在其中。
<programlisting>
typedef struct spgChooseIn
{
    Datum       datum;          /* 要被索引的原始数据 */
    Datum       leafDatum;      /* 要被存储在叶子中的当前数据 */
    int         level;          /* 当前层（从零计数） */

    /* 来自当前内部元组的数据 */
    bool        allTheSame;     /* tuple is marked all-the-same? */
    bool        hasPrefix;      /* 元组有一个前缀？ */
    Datum       prefixDatum;    /* 如果有，前缀值 */
    int         nNodes;         /* 内部元组中的结点数目 */
    Datum      *nodeLabels;     /* 结点标签值（如果没有为 NULL） */
} spgChooseIn;

typedef enum spgChooseResultType
{
    spgMatchNode = 1,           /* 下降到现有结点 */
    spgAddNode,                 /* 向内部元组增加一个结点 */
    spgSplitTuple               /* 划分内部元组（修改它的前缀） */
} spgChooseResultType;

typedef struct spgChooseOut
{
    spgChooseResultType resultType;     /* 动作代码，见上文 */
    union
    {
        struct                  /* 用于spgMatchNode的结果 */
        {
            int         nodeN;      /* 下降到这个结点（索引从 0 开始） */
            int         levelAdd;   /* 这次匹配增加的层 */
            Datum       restDatum;  /* 新叶数据 */
        }           matchNode;
        struct                  /* 用于spgAddNode的结果 */
        {
            Datum       nodeLabel;  /* 新结点的标签 */
            int         nodeN;      /* 在哪里插入它（索引从 0 开始） */
        }           addNode;
        struct                  /* 用于spgSplitTuple的结果 */
        {
            /* 以一个子元组形成新的上层内部元组的信息*/
            bool        prefixHasPrefix;    /* 元组能有前缀吗？ */
            Datum       prefixPrefixDatum;  /* 如果有，前缀值 */
            int         prefixNNodes;       /* 节点数 */
            Datum      *prefixNodeLabels;   /* 它们的标签 (没有标签为NULL) */
            int         childNodeN;         /* 哪个节点获取子元组 */

            /* 来自放有所有旧结点的新下层内部元组的信息 */
            bool        postfixHasPrefix;   /* 元组能有前缀吗？ */
            Datum       postfixPrefixDatum; /* 如果有，前缀值 */
        }           splitTuple;
    }           result;
} spgChooseOut;
</programlisting>

       <structfield>datum</>是将被插入到索引中的原始数据。<structfield>leafDatum</>最初和<structfield>datum</>一样，但是如果<function>choose</function>或<function>picksplit</function>改变了它，那么位于较低层的<structfield>leafDatum</>值就会有所改变。当插入搜索到达一个叶子页，<structfield>leafDatum</>的当前值就会被存储在新创建的叶子元组中。<structfield>level</>是当前内部元组的层次，根层是 0 。如果当前内部元组被标记为包含多个等价节点（见<xref linkend="spgist-all-the-same">），<structfield>allTheSame</>为真。如果当前内部元组有一个前缀，<structfield>hasPrefix</>为真，如果这样，<structfield>prefixDatum</>为前缀值。<structfield>nNodes</>是包含在内部元组中子结点的数量，并且<structfield>nodeLabels</>是这些子结点的标签值的数组，如果没有标签则为 NULL。
      </para>

<!--==========================orignal english content==========================
      <para>
       The <function>choose</function> function can determine either that
       the new value matches one of the existing child nodes, or that a new
       child node must be added, or that the new value is inconsistent with
       the tuple prefix and so the inner tuple must be split to create a
       less restrictive prefix.
      </para>
____________________________________________________________________________-->
      <para>
       <function>choose</function>函数能决定新值是匹配一个现有子结点，或是必须增加一个新的子节点，亦或是新值和元组的前缀不一致并且因此该内部元组必须被分裂来创建限制性更低的前缀。
      </para>

<!--==========================orignal english content==========================
      <para>
       If the new value matches one of the existing child nodes,
       set <structfield>resultType</> to <literal>spgMatchNode</>.
       Set <structfield>nodeN</> to the index (from zero) of that node in
       the node array.
       Set <structfield>levelAdd</> to the increment in
       <structfield>level</> caused by descending through that node,
       or leave it as zero if the operator class does not use levels.
       Set <structfield>restDatum</> to equal <structfield>datum</>
       if the operator class does not modify datums from one level to the
       next, or otherwise set it to the modified value to be used as
       <structfield>leafDatum</> at the next level.
      </para>
____________________________________________________________________________-->
      <para>
       如果新值匹配一个现有的子结点，将<structfield>resultType</>设置为<literal>spgMatchNode</>。将<structfield>nodeN</>设置为该结点在结点数组中的索引（从零开始）。将<structfield>levelAdd</>设置为传到该结点导致的<structfield>level</>增加，或者在操作符类不使用层数时将它置为零。如果操作符类没有把数据从一层修改到下一层，将<structfield>restDatum</>设置为等于<structfield>datum</>，否则将它设置为在下一层用作<structfield>leafDatum</>的被修改后的值。
      </para>

<!--==========================orignal english content==========================
      <para>
       If a new child node must be added,
       set <structfield>resultType</> to <literal>spgAddNode</>.
       Set <structfield>nodeLabel</> to the label to be used for the new
       node, and set <structfield>nodeN</> to the index (from zero) at which
       to insert the node in the node array.
       After the node has been added, the <function>choose</function>
       function will be called again with the modified inner tuple;
       that call should result in an <literal>spgMatchNode</> result.
      </para>
____________________________________________________________________________-->
      <para>
       如果必须增加一个新的子结点，将<structfield>resultType</>设置为<literal>spgAddNode</>。将<structfield>nodeLabel</>设置为在新结点中使用的标签，并将<structfield>nodeN</>设置为插入该结点的位置在结点数组中的索引（从零开始）。在结点被增加之后，<function>choose</function>函数将被再次调用并使用修改后的内部元组，那时将会导致一个<literal>spgMatchNode</>结果。
      </para>

<!--==========================orignal english content==========================
      <para>
       If the new value is inconsistent with the tuple prefix,
       set <structfield>resultType</> to <literal>spgSplitTuple</>.
       This action moves all the existing nodes into a new lower-level
       inner tuple, and replaces the existing inner tuple with a tuple
       having a single downlink pointing to the new lower-level inner tuple.
       Set <structfield>prefixHasPrefix</> to indicate whether the new
       upper tuple should have a prefix, and if so set
       <structfield>prefixPrefixDatum</> to the prefix value.  This new
       prefix value must be sufficiently less restrictive than the original
       to accept the new value to be indexed.
       Set <structfield>prefixNNodes</> to the number of nodes needed in the
       new tuple, and set <structfield>prefixNodeLabels</> to a palloc'd array
       holding their labels, or to NULL if node labels are not required.
       Note that the total size of the new upper tuple must be no more
       than the total size of the tuple it is replacing; this constrains
       the lengths of the new prefix and new labels.
       Set <structfield>childNodeN</> to the index (from zero) of the node
       that will downlink to the new lower-level inner tuple.
       Set <structfield>postfixHasPrefix</> to indicate whether the new
       lower-level inner tuple should have a prefix, and if so set
       <structfield>postfixPrefixDatum</> to the prefix value.  The
       combination of these two prefixes and the downlink node's label
       (if any) must have the same meaning as the original prefix, because
       there is no opportunity to alter the node labels that are moved to
       the new lower-level tuple, nor to change any child index entries.
       After the node has been split, the <function>choose</function>
       function will be called again with the replacement inner tuple.
       That call may return an <literal>spgAddNode</> result, if no suitable
       node was created by the <literal>spgSplitTuple</> action.  Eventually
       <function>choose</function> must return <literal>spgMatchNode</> to
       allow the insertion to descend to the next level.
      </para>
____________________________________________________________________________-->
      <para>
       如果新值和元组的前缀不一致，将<structfield>resultType</>设置为<literal>spgSplitTuple</>。
	   这个动作将所有现有的结点移动到一个新的下层内部元组，并且将现有的内部元组用一个新元组替换，
	   该元组有个下行链路指向那个新的下层内部元组。将<structfield>prefixHasPrefix</>
	   设置为指示新的上层元组是否具有一个前缀，并且在如果有前缀时设置
	   <structfield>prefixPrefixDatum</>为前缀值。
	   这个新的前缀值必须比原来的值要足够宽松以便能够接受将被索引的新值。
	   将<structfield>prefixNNodes</>设置为新元组中所需的节点数，
	   并将<structfield>prefixNodeLabels</>设置为保存其标签的palloc'd数组，
	   或者如果不需要节点标签，则将其设置为NULL。请注意，
	   新的上层元组的总大小必须不大于它所替换的元组的总大小；这约束了新前缀和新标签的长度。
	   将<structfield>childNodeN</>设置为将下行链路到新的较低级内部元组的节点的索引（从零开始）。
	   将<structfield>postfixHasPrefix</>设置为指示新下层内部元组是否具有一个前缀，
	   并且如果有前缀则设置<structfield>postfixPrefixDatum</>为前缀值。
	   这两个前缀和下行链路节点的标签（如果有）的组合必须和原来的前缀具有相同的含义，
	   因为我们没有机会修改被移动到新下层元组的结点标签，也没有机会改变任何子索引项。
	   在结点被分裂后，<function>choose</function>函数将被再次调用并使用替换内部元组。
	   如果没有合适的节点由<literal>spgSplitTuple</>动作创建，该次调用可能会返回一个
	   <literal>spgAddNode</>结果。最终<function>choose</function>必须返回
	   <literal>spgMatchNode</>以允许插入下降到下一个级别。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><function>picksplit</></term>
____________________________________________________________________________-->
     <term><function>picksplit</></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Decides how to create a new inner tuple over a set of leaf tuples.
      </para>
____________________________________________________________________________-->
      <para>
       决定如何在一组叶子元组上创建一个新的内部元组。
      </para>

<!--==========================orignal english content==========================
      <para>
        The <acronym>SQL</> declaration of the function must look like this:
<programlisting>
CREATE FUNCTION my_picksplit(internal, internal) RETURNS void ...
</programlisting>
      The first argument is a pointer to a <structname>spgPickSplitIn</>
      C struct, containing input data for the function.
      The second argument is a pointer to a <structname>spgPickSplitOut</>
      C struct, which the function must fill with result data.
<programlisting>
typedef struct spgPickSplitIn
{
    int         nTuples;        /* number of leaf tuples */
    Datum      *datums;         /* their datums (array of length nTuples) */
    int         level;          /* current level (counting from zero) */
} spgPickSplitIn;

typedef struct spgPickSplitOut
{
    bool        hasPrefix;      /* new inner tuple should have a prefix? */
    Datum       prefixDatum;    /* if so, its value */

    int         nNodes;         /* number of nodes for new inner tuple */
    Datum      *nodeLabels;     /* their labels (or NULL for no labels) */

    int        *mapTuplesToNodes;   /* node index for each leaf tuple */
    Datum      *leafTupleDatums;    /* datum to store in each new leaf tuple */
} spgPickSplitOut;
</programlisting>

       <structfield>nTuples</> is the number of leaf tuples provided.
       <structfield>datums</> is an array of their datum values.
       <structfield>level</> is the current level that all the leaf tuples
       share, which will become the level of the new inner tuple.
      </para>
____________________________________________________________________________-->
      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：
<programlisting>
CREATE FUNCTION my_picksplit(internal, internal) RETURNS void ...
</programlisting>
      第一个参数是一个指向<structname>spgPickSplitIn</> C 结构的指针，包含该函数的输入数据。第二个参数是一个指向<structname>spgPickSplitOut</> C 结构的指针，函数必须将结果数据填充在其中。
<programlisting>
typedef struct spgPickSplitIn
{
    int         nTuples;        /* 叶子元组的数量 */
    Datum      *datums;         /* 它们的数据（长度为 nTuples 的数组） */
    int         level;          /* 当前层次（从零开始计） */
} spgPickSplitIn;

typedef struct spgPickSplitOut
{
    bool        hasPrefix;      /* 新内部元组应该有一个前缀吗？ */
    Datum       prefixDatum;    /* 如果有，前缀值 */

    int         nNodes;         /* 新内部元组的结点数 */
    Datum      *nodeLabels;     /* 它们的标签（没有标签则为NULL） */

    int        *mapTuplesToNodes;   /* 每一个叶子元组的结点索引 */
    Datum      *leafTupleDatums;    /* 存储在每一个新叶子元组中的数据 */
} spgPickSplitOut;
</programlisting>

       <structfield>nTuples</>是所提供的叶子元组的数量。
       <structfield>datums</>是它们的数据值的数组。
       <structfield>level</>是所有叶子元组共有的当前层次，它将成为新内部元组的层次。
      </para>

<!--==========================orignal english content==========================
      <para>
       Set <structfield>hasPrefix</> to indicate whether the new inner
       tuple should have a prefix, and if so set
       <structfield>prefixDatum</> to the prefix value.
       Set <structfield>nNodes</> to indicate the number of nodes that
       the new inner tuple will contain, and
       set <structfield>nodeLabels</> to an array of their label values,
       or to NULL if node labels are not required.
       Set <structfield>mapTuplesToNodes</> to an array that gives the index
       (from zero) of the node that each leaf tuple should be assigned to.
       Set <structfield>leafTupleDatums</> to an array of the values to
       be stored in the new leaf tuples (these will be the same as the
       input <structfield>datums</> if the operator class does not modify
       datums from one level to the next).
       Note that the <function>picksplit</> function is
       responsible for palloc'ing the
       <structfield>nodeLabels</>, <structfield>mapTuplesToNodes</> and
       <structfield>leafTupleDatums</> arrays.
      </para>
____________________________________________________________________________-->
      <para>
       将<structfield>hasPrefix</>设置为指示新内部元组是否应该有前缀，并且如果有前缀则将<structfield>prefixDatum</>设置成前缀值。将<structfield>nNodes</>设置为新内部元组将包含的结点数目，并且将<structfield>nodeLabels</>设置为它们的标签值的数组或者 NULL（如果结点不要求标签）。将<structfield>mapTuplesToNodes</>设置为一个数组，该数组告诉每一个叶子元组应该被赋予的结点的索引（从零开始）。将<structfield>leafTupleDatums</>设置为由将要被存储在新叶子元组中的值构成的一个数组（如果操作符类不将数据从一层修改到下一层，这些值将和输入的<structfield>datums</>相同）。注意<function>picksplit</>函数负责为<structfield>nodeLabels</>、<structfield>mapTuplesToNodes</>和<structfield>leafTupleDatums</>数组进行 palloc。
      </para>

<!--==========================orignal english content==========================
      <para>
       If more than one leaf tuple is supplied, it is expected that the
       <function>picksplit</> function will classify them into more than
       one node; otherwise it is not possible to split the leaf tuples
       across multiple pages, which is the ultimate purpose of this
       operation.  Therefore, if the <function>picksplit</> function
       ends up placing all the leaf tuples in the same node, the core
       SP-GiST code will override that decision and generate an inner
       tuple in which the leaf tuples are assigned at random to several
       identically-labeled nodes.  Such a tuple is marked
       <literal>allTheSame</> to signify that this has happened.  The
       <function>choose</> and <function>inner_consistent</> functions
       must take suitable care with such inner tuples.
       See <xref linkend="spgist-all-the-same"> for more information.
      </para>
____________________________________________________________________________-->
      <para>
       如果提供了多于一个叶子元组，<function>picksplit</>被寄望于将它们分类到多余一个结点中；否则不可能将叶子元组划分到多个页面，这也是这个操作的终极目的。因此，如果<function>picksplit</>函数结束时把所有叶子元组放在同一个结点中，核心SP-GiST代码将覆盖该决定，并且生成一个内部元组，将叶子元组随机分配到多个不同标签的结点。这样一个元组被标记为<literal>allTheSame</>来表示发生了这种情况。<function>choose</>和<function>inner_consistent</>函数必须对这样的内部元组采取合适的处理。详见<xref linkend="spgist-all-the-same">。
      </para>

<!--==========================orignal english content==========================
      <para>
       <function>picksplit</> can be applied to a single leaf tuple only
       in the case that the <function>config</> function set
       <structfield>longValuesOK</> to true and a larger-than-a-page input
       value has been supplied.  In this case the point of the operation is
       to strip off a prefix and produce a new, shorter leaf datum value.
       The call will be repeated until a leaf datum short enough to fit on
       a page has been produced.  See <xref linkend="spgist-limits"> for
       more information.
      </para>
____________________________________________________________________________-->
      <para>
       <function>picksplit</>只能在一种情况下被应用在单独一个叶子元组上，这种情况是<function>config</>函数将<structfield>longValuesOK</>设置为真并且提供了一个长于一页的输入。在这种情况中，该操作的要点是剥离一个前缀并且产生一个新的、较短的叶子数据值。这种调用将被重复直到产生一个足够短能够放入到一页的叶子数据。详见<xref linkend="spgist-limits">。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><function>inner_consistent</></term>
____________________________________________________________________________-->
     <term><function>inner_consistent</></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Returns set of nodes (branches) to follow during tree search.
      </para>
____________________________________________________________________________-->
      <para>
       在树搜索过程中返回一组要追求的结点（分支）。
      </para>

<!--==========================orignal english content==========================
      <para>
       The <acronym>SQL</> declaration of the function must look like this:
<programlisting>
CREATE FUNCTION my_inner_consistent(internal, internal) RETURNS void ...
</programlisting>
      The first argument is a pointer to a <structname>spgInnerConsistentIn</>
      C struct, containing input data for the function.
      The second argument is a pointer to a <structname>spgInnerConsistentOut</>
      C struct, which the function must fill with result data.

<programlisting>
typedef struct spgInnerConsistentIn
{
    ScanKey     scankeys;       /* array of operators and comparison values */
    int         nkeys;          /* length of array */

    Datum       reconstructedValue;     /* value reconstructed at parent */
    void       *traversalValue; /* opclass-specific traverse value */
    MemoryContext traversalMemoryContext;   /* put new traverse values here */
    int         level;          /* current level (counting from zero) */
    bool        returnData;     /* original data must be returned? */

    /* Data from current inner tuple */
    bool        allTheSame;     /* tuple is marked all-the-same? */
    bool        hasPrefix;      /* tuple has a prefix? */
    Datum       prefixDatum;    /* if so, the prefix value */
    int         nNodes;         /* number of nodes in the inner tuple */
    Datum      *nodeLabels;     /* node label values (NULL if none) */
} spgInnerConsistentIn;

typedef struct spgInnerConsistentOut
{
    int         nNodes;         /* number of child nodes to be visited */
    int        *nodeNumbers;    /* their indexes in the node array */
    int        *levelAdds;      /* increment level by this much for each */
    Datum      *reconstructedValues;    /* associated reconstructed values */
    void      **traversalValues;        /* opclass-specific traverse values */
} spgInnerConsistentOut;
</programlisting>

       The array <structfield>scankeys</>, of length <structfield>nkeys</>,
       describes the index search condition(s).  These conditions are
       combined with AND &mdash; only index entries that satisfy all of
       them are interesting.  (Note that <structfield>nkeys</> = 0 implies
       that all index entries satisfy the query.)  Usually the consistent
       function only cares about the <structfield>sk_strategy</> and
       <structfield>sk_argument</> fields of each array entry, which
       respectively give the indexable operator and comparison value.
       In particular it is not necessary to check <structfield>sk_flags</> to
       see if the comparison value is NULL, because the SP-GiST core code
       will filter out such conditions.
       <structfield>reconstructedValue</> is the value reconstructed for the
       parent tuple; it is <literal>(Datum) 0</> at the root level or if the
       <function>inner_consistent</> function did not provide a value at the
       parent level.
       <structfield>traversalValue</> is a pointer to any traverse data
       passed down from the previous call of <function>inner_consistent</>
       on the parent index tuple, or NULL at the root level.
       <structfield>traversalMemoryContext</> is the memory context in which
       to store output traverse values (see below).
       <structfield>level</> is the current inner tuple's level, starting at
       zero for the root level.
       <structfield>returnData</> is <literal>true</> if reconstructed data is
       required for this query; this will only be so if the
       <function>config</> function asserted <structfield>canReturnData</>.
       <structfield>allTheSame</> is true if the current inner tuple is
       marked <quote>all-the-same</>; in this case all the nodes have the
       same label (if any) and so either all or none of them match the query
       (see <xref linkend="spgist-all-the-same">).
       <structfield>hasPrefix</> is true if the current inner tuple contains
       a prefix; if so,
       <structfield>prefixDatum</> is its value.
       <structfield>nNodes</> is the number of child nodes contained in the
       inner tuple, and
       <structfield>nodeLabels</> is an array of their label values, or
       NULL if the nodes do not have labels.
      </para>
____________________________________________________________________________-->
      <para>
       该函数的<acronym>SQL</>声明必须看起来像这样：
<programlisting>
CREATE FUNCTION my_inner_consistent(internal, internal) RETURNS void ...
</programlisting>
      第一个参数是一个指向<structname>spgInnerConsistentIn</> C 结构的指针，包含该函数的输入数据。第二个参数是一个指向<structname>spgInnerConsistentOut</> C 结构的指针，函数必须将结果数据填充在其中。

<programlisting>
typedef struct spgInnerConsistentIn
{
    ScanKey     scankeys;       /* 操作符和比较值的数组 */
    int         nkeys;          /* 数组的长度 */

    Datum       reconstructedValue;     /* 在父结点中的重构值 */
    void       *traversalValue; /* 操作符类相关的贯穿值 */
    MemoryContext traversalMemoryContext;   /* 把新的贯穿值放在这里 */
    int         level;          /* 当前层次（从零开始计） */
    bool        returnData;     /* 是否必须返回原始数据？ */

    /* 来自当前内元组的数据 */
    bool        allTheSame;     /* 元组被标记为完全相同？ */
    bool        hasPrefix;      /* 元组有前缀？ */
    Datum       prefixDatum;    /* 如果有，前缀值 */
    int         nNodes;         /* 内元组中的结点数 */
    Datum      *nodeLabels;     /* 结点标签值（没有就是 NULL） */
} spgInnerConsistentIn;

typedef struct spgInnerConsistentOut
{
    int         nNodes;         /* 要被访问的子结点数 */
    int        *nodeNumbers;    /* 它们在结点数组中的索引 */
    int        *levelAdds;      /* 为每个子结点要增加的层数 */
    Datum      *reconstructedValues;    /* 相关的重构值 */
    void      **traversalValues;        /* 操作符类相关的贯穿值 */
} spgInnerConsistentOut;
</programlisting>

       长度为<structfield>nkeys</>的数组<structfield>scankeys</>描述了索引搜索条件。这些条件用 AND 组合 &mdash; 只对满足所有条件的索引项感兴趣（注意，<structfield>nkeys</> = 0 表示所有索引项满足该查询）。通常一致函数只关心每个数组项的<structfield>sk_strategy</>和<structfield>sk_argument</>，它们分别给出了可索引操作符和比较值。特别要说明的是，没有必要去检查<structfield>sk_flags</>来看比较值是否为 NULL，因为 SP-GiST 的核心代码会过滤这样的条件。<structfield>reconstructedValue</>是用于父元组的重构值，在根层时或者如果<function>inner_consistent</>函数没有在父层提供一个值时，它为<literal>(Datum) 0</>。<structfield>traversalValue</>是任意贯穿数据的指针，该数据由父索引元组上的上一次<function>inner_consistent</>调用传递下来，在根层上这个指针为 NULL。<structfield>traversalMemoryContext</>是用于存放输出的贯穿值（见下文）的内存上下文。<structfield>level</>是当前内元组层次，根层是 0。如果这个查询要求重构的数据，<structfield>returnData</>是<literal>true</>。如果<function>config</>断言<structfield>canReturnData</>，<structfield>returnData</>只会是<literal>true</>。如果当前的内元组被标记为<quote>完全一样</>，那么<structfield>allTheSame</>为真。在这种情况下，所有的结点都具有相同的标签（如果有），而且它们要么全部匹配该查询，要么一个都不匹配查询（见<xref linkend="spgist-all-the-same">）。如果当前内元组包含一个前缀，则<structfield>hasPrefix</>为真。如果这样，<structfield>prefixDatum</>就是该前缀的值。<structfield>nNodes</>是包含在内元组中的子结点的数量，<structfield>nodeLabels</>是它们的标签值的数组。当然如果结点没有标签，这个数组就为 NULL。
      </para>

<!--==========================orignal english content==========================
      <para>
       <structfield>nNodes</> must be set to the number of child nodes that
       need to be visited by the search, and
       <structfield>nodeNumbers</> must be set to an array of their indexes.
       If the operator class keeps track of levels, set
       <structfield>levelAdds</> to an array of the level increments
       required when descending to each node to be visited.  (Often these
       increments will be the same for all the nodes, but that's not
       necessarily so, so an array is used.)
       If value reconstruction is needed, set
       <structfield>reconstructedValues</> to an array of the values
       reconstructed for each child node to be visited; otherwise, leave
       <structfield>reconstructedValues</> as NULL.
       If it is desired to pass down additional out-of-band information
       (<quote>traverse values</>) to lower levels of the tree search,
       set <structfield>traversalValues</> to an array of the appropriate
       traverse values, one for each child node to be visited; otherwise,
       leave <structfield>traversalValues</> as NULL.
       Note that the <function>inner_consistent</> function is
       responsible for palloc'ing the
       <structfield>nodeNumbers</>, <structfield>levelAdds</>,
       <structfield>reconstructedValues</>, and
       <structfield>traversalValues</> arrays in the current memory context.
       However, any output traverse values pointed to by
       the <structfield>traversalValues</> array should be allocated
       in <structfield>traversalMemoryContext</>.
       Each traverse value must be a single palloc'd chunk.
      </para>
____________________________________________________________________________-->
      <para>
       <structfield>nNodes</>必须被设置为搜索需要访问的子结点数，并且<structfield>nodeNumbers</>必须被设置为子结点索引的数组。如果操作符类跟踪层次，把<structfield>levelAdds</>设置成一个数组，其中说明了在下降到要被访问的每一个结点时需要增加的层数（通常这些增量对于所有结点都是相同的，但是并不一定如此，所以需要使用一个数组）。如果需要值重构，将<structfield>reconstructedValues</>设置成要被访问的每一个子结点的重构值数组。否则让<structfield>reconstructedValues</>为 NULL。如果想要把额外的带外信息（<quote>贯穿值</>）向下传递给树搜索的较低层，可以把<structfield>traversalValues</>设置成合适的贯穿值的数组，其中每一个元素用于一个要被访问的子节点。如果不需要传递额外的带外信息，则把<structfield>traversalValues</>设置为 NULL。注意，<function>inner_consistent</>函数负责在当前内存上下文中分配<structfield>nodeNumbers</>、<structfield>levelAdds</>、<structfield>reconstructedValues</>和<structfield>traversalValues</>数组。不过，任何由<structfield>traversalValues</>数组指向的输出贯穿值应该在<structfield>traversalMemoryContext</>中分配。每一个贯穿值必须是一个单独分配的块（chunk）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><function>leaf_consistent</></term>
____________________________________________________________________________-->
     <term><function>leaf_consistent</></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Returns true if a leaf tuple satisfies a query.
      </para>
____________________________________________________________________________-->
      <para>
       如果一个叶子元组满足一个查询则返回真。
      </para>

<!--==========================orignal english content==========================
      <para>
       The <acronym>SQL</> declaration of the function must look like this:
<programlisting>
CREATE FUNCTION my_leaf_consistent(internal, internal) RETURNS bool ...
</programlisting>
      The first argument is a pointer to a <structname>spgLeafConsistentIn</>
      C struct, containing input data for the function.
      The second argument is a pointer to a <structname>spgLeafConsistentOut</>
      C struct, which the function must fill with result data.
<programlisting>
typedef struct spgLeafConsistentIn
{
    ScanKey     scankeys;       /* array of operators and comparison values */
    int         nkeys;          /* length of array */

    Datum       reconstructedValue;     /* value reconstructed at parent */
    void       *traversalValue; /* opclass-specific traverse value */
    int         level;          /* current level (counting from zero) */
    bool        returnData;     /* original data must be returned? */

    Datum       leafDatum;      /* datum in leaf tuple */
} spgLeafConsistentIn;

typedef struct spgLeafConsistentOut
{
    Datum       leafValue;      /* reconstructed original data, if any */
    bool        recheck;        /* set true if operator must be rechecked */
} spgLeafConsistentOut;
</programlisting>

       The array <structfield>scankeys</>, of length <structfield>nkeys</>,
       describes the index search condition(s).  These conditions are
       combined with AND &mdash; only index entries that satisfy all of
       them satisfy the query.  (Note that <structfield>nkeys</> = 0 implies
       that all index entries satisfy the query.)  Usually the consistent
       function only cares about the <structfield>sk_strategy</> and
       <structfield>sk_argument</> fields of each array entry, which
       respectively give the indexable operator and comparison value.
       In particular it is not necessary to check <structfield>sk_flags</> to
       see if the comparison value is NULL, because the SP-GiST core code
       will filter out such conditions.
       <structfield>reconstructedValue</> is the value reconstructed for the
       parent tuple; it is <literal>(Datum) 0</> at the root level or if the
       <function>inner_consistent</> function did not provide a value at the
       parent level.
       <structfield>traversalValue</> is a pointer to any traverse data
       passed down from the previous call of <function>inner_consistent</>
       on the parent index tuple, or NULL at the root level.
       <structfield>level</> is the current leaf tuple's level, starting at
       zero for the root level.
       <structfield>returnData</> is <literal>true</> if reconstructed data is
       required for this query; this will only be so if the
       <function>config</> function asserted <structfield>canReturnData</>.
       <structfield>leafDatum</> is the key value stored in the current
       leaf tuple.
      </para>
____________________________________________________________________________-->
      <para>
       该函数的<acronym>SQL</>声明必须看起来像这样：
<programlisting>
CREATE FUNCTION my_leaf_consistent(internal, internal) RETURNS bool ...
</programlisting>
      第一个参数是一个指向<structname>spgLeafConsistentIn</> C 结构的指针，包含该函数的输入数据。第二个参数是一个指向<structname>spgLeafConsistentOut</> C 结构的指针，函数必须将结果数据填充在其中。
<programlisting>
typedef struct spgLeafConsistentIn
{
    ScanKey     scankeys;       /* 操作符和比较值的数组 */
    int         nkeys;          /* 数组的长度 */

    Datum       reconstructedValue;     /* 在父结点中的重构值 */
    void       *traversalValue; /* 操作符类相关的贯穿值 */
    int         level;          /* 当前层次（从零开始计） */
    bool        returnData;     /* 是否必须返回原始数据？ */

    Datum       leafDatum;      /* 叶子元组中的数据 */
} spgLeafConsistentIn;

typedef struct spgLeafConsistentOut
{
    Datum       leafValue;      /* 重构的原始数据，如果有 */
    bool        recheck;        /* 如果操作符必须被重新检查则设为真 */
} spgLeafConsistentOut;
</programlisting>

       长度为<structfield>nkeys</>的数组<structfield>scankeys</>描述了索引搜索条件。这些条件用 AND 组合在一起 &mdash; 只有满足所有条件的索引项才满足该查询（注意<structfield>nkeys</> = 0 表示所有的索引项都满足查询）。通常 consistent 函数值关注每一个数组项的<structfield>sk_strategy</>和<structfield>sk_argument</>域，它们分别给出了可索引操作符和比较值。特别是它无需检查<structfield>sk_flags</>来检查比较值是否为 NULL，因为 SP-GiST 核心代码将过滤掉这类条件。<structfield>reconstructedValue</>是为父元组重构的值，在根层或者当<function>inner_consistent</>没有提供父层上的值时，它是<literal>(Datum) 0</>。<structfield>traversalValue</>是任意贯穿数据的指针，该数据由父索引元组上的上一次<function>inner_consistent</>调用传递下来，在根层上这个指针为 NULL。<structfield>level</>是当前的叶子元组所在的层次，根层为零。如果这个查询要求重构的数据，则<structfield>returnData</>为<literal>true</>。只有在<function>config</>函数主张了<structfield>canReturnData</>时才会如此。<structfield>leafDatum</>是存储在当前叶子元组中的键值。
      </para>

<!--==========================orignal english content==========================
      <para>
       The function must return <literal>true</> if the leaf tuple matches the
       query, or <literal>false</> if not.  In the <literal>true</> case,
       if <structfield>returnData</> is <literal>true</> then
       <structfield>leafValue</> must be set to the value originally supplied
       to be indexed for this leaf tuple.  Also,
       <structfield>recheck</> may be set to <literal>true</> if the match
       is uncertain and so the operator(s) must be re-applied to the actual
       heap tuple to verify the match.
      </para>
____________________________________________________________________________-->
      <para>
       如果叶子元组匹配查询，则该函数必须返回<literal>true</>，否则返回<literal>false</>。在返回<literal>true</>的情况中，如果<structfield>returnData</>为<literal>true</>，则<structfield>leafValue</>必须被设置为最初为构建这个叶子元组提供的值。还有，如果匹配是不确定的并且操作符必须被重新应用在实际堆元组上验证匹配，则<structfield>recheck</>会被设置为<literal>true</>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--==========================orignal english content==========================
  <para>
   All the SP-GiST support methods are normally called in a short-lived
   memory context; that is, <varname>CurrentMemoryContext</> will be reset
   after processing of each tuple.  It is therefore not very important to
   worry about pfree'ing everything you palloc.  (The <function>config</>
   method is an exception: it should try to avoid leaking memory.  But
   usually the <function>config</> method need do nothing but assign
   constants into the passed parameter struct.)
  </para>
____________________________________________________________________________-->
  <para>
   所有的 SP-GiST 支持方法通常都在一个短期存在的内存上下文中被调用，即在处理完每一个元组后<varname>CurrentMemoryContext</>将被重置。因此并不需要操心 pfree 你 palloc 的任何东西（<function>config</>方法是一个特例：它应该避免泄漏内存。但是通常<function>config</>方法只需要为传出的参数结构赋常数值）。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the indexed column is of a collatable data type, the index collation
   will be passed to all the support methods, using the standard
   <function>PG_GET_COLLATION()</> mechanism.
  </para>
____________________________________________________________________________-->
  <para>
   如果被索引的列是一种可排序的数据类型，索引的排序规则将被使用标准的<function>PG_GET_COLLATION()</>机制传递给所有的支持方法。
  </para>

</sect1>

<sect1 id="spgist-implementation">
<!--==========================orignal english content==========================
 <title>Implementation</title>
____________________________________________________________________________-->
 <title>实现</title>

<!--==========================orignal english content==========================
  <para>
   This section covers implementation details and other tricks that are
   useful for implementers of <acronym>SP-GiST</acronym> operator classes to
   know.
  </para>
____________________________________________________________________________-->
  <para>
   这一节覆盖了实现细节以及<acronym>SP-GiST</acronym>操作符类的实现者需要知道的有用的技巧。
  </para>

 <sect2 id="spgist-limits">
<!--==========================orignal english content==========================
  <title>SP-GiST Limits</title>
____________________________________________________________________________-->
  <title>SP-GiST 限制</title>

<!--==========================orignal english content==========================
  <para>
   Individual leaf tuples and inner tuples must fit on a single index page
   (8kB by default).  Therefore, when indexing values of variable-length
   data types, long values can only be supported by methods such as radix
   trees, in which each level of the tree includes a prefix that is short
   enough to fit on a page, and the final leaf level includes a suffix also
   short enough to fit on a page.  The operator class should set
   <structfield>longValuesOK</> to TRUE only if it is prepared to arrange for
   this to happen.  Otherwise, the <acronym>SP-GiST</acronym> core will
   reject any request to index a value that is too large to fit
   on an index page.
  </para>
____________________________________________________________________________-->
  <para>
   单独的叶子节点和内部节点必须能适合一个单一的索引页面（默认为 8kB）。因此，当索引值是一种变长数据类型时（长值只能由如 radix 树的方法所支持），树的每一层包含的前缀都足够短以适合一个页面，并且最终的叶子层包括的后缀也足够短以适合一个页面。如果操作符类准备好做这种事情，它应该将<structfield>longValuesOK</>设置为 TRUE。否则，<acronym>SP-GiST</acronym>核心将拒绝任何要索引超过一个所以页面长度的值的请求。
  </para>

<!--==========================orignal english content==========================
  <para>
   Likewise, it is the operator class's responsibility that inner tuples
   do not grow too large to fit on an index page; this limits the number
   of child nodes that can be used in one inner tuple, as well as the
   maximum size of a prefix value.
  </para>
____________________________________________________________________________-->
  <para>
   同样，操作符类应该负责不要让内部元组增长到无法放在一个索引页面中。这限制了能在一个内部元组中使用的子节点的数目，以及一个前缀值的最大尺寸。
  </para>

<!--==========================orignal english content==========================
  <para>
   Another limitation is that when an inner tuple's node points to a set
   of leaf tuples, those tuples must all be in the same index page.
   (This is a design decision to reduce seeking and save space in the
   links that chain such tuples together.)  If the set of leaf tuples
   grows too large for a page, a split is performed and an intermediate
   inner tuple is inserted.  For this to fix the problem, the new inner
   tuple <emphasis>must</> divide the set of leaf values into more than one
   node group.  If the operator class's <function>picksplit</> function
   fails to do that, the <acronym>SP-GiST</acronym> core resorts to
   extraordinary measures described in <xref linkend="spgist-all-the-same">.
  </para>
____________________________________________________________________________-->
  <para>
   另一个限制是，当一个内部元组的节点指向一组叶子元组时，这些元组必须都在同一个索引页面中（这种设计是为了减少在这类元组构成链中进行定位的时间并且节省空间）。如果叶子元组集合增长到无法放在一个页面中，将执行一次分裂并且插入一个中间的内部元组。为此，新的内部元组<emphasis>必须</>把叶子值的集合划分成多于一个节点分组。如果操作符类的<function>picksplit</>函数无法做到这一点，<acronym>SP-GiST</acronym>核心只能求助于<xref linkend="spgist-all-the-same">中所介绍的额外措施。
  </para>
 </sect2>

 <sect2 id="spgist-null-labels">
<!--==========================orignal english content==========================
  <title>SP-GiST Without Node Labels</title>
____________________________________________________________________________-->
  <title>无节点标签的 SP-GiST</title>

<!--==========================orignal english content==========================
  <para>
   Some tree algorithms use a fixed set of nodes for each inner tuple;
   for example, in a quad-tree there are always exactly four nodes
   corresponding to the four quadrants around the inner tuple's centroid
   point.  In such a case the code typically works with the nodes by
   number, and there is no need for explicit node labels.  To suppress
   node labels (and thereby save some space), the <function>picksplit</>
   function can return NULL for the <structfield>nodeLabels</> array,
   and likewise the <function>choose</> function can return NULL for
   the <structfield>prefixNodeLabels</> array during
   a <literal>spgSplitTuple</> action.
   This will in turn result in <structfield>nodeLabels</> being NULL during
   subsequent calls to <function>choose</> and <function>inner_consistent</>.
   In principle, node labels could be used for some inner tuples and omitted
   for others in the same index.
  </para>
____________________________________________________________________________-->
  <para>
   某些树算法对每个内部元组都使用一种固定的节点集合。例如，
   在一个四叉树中总是正好有四个节点对应于围绕内部节点中心点的四个象限。在这种情况下，
   代码总是通过编号来处理节点，而不需要显式的节点标签。为了压缩节点标签（并且因此节省一些空间），
   <function>picksplit</>函数可以为<structfield>nodeLabels</>数组返回 NULL，
   同样，在<literal>spgSplitTuple</>操作期间，<function>choose</>函数可以为
   <structfield>prefixNodeLabels</>数组返回NULL。
   这将会导致后续对<function>choose</>和<function>inner_consistent</>调用时<structfield>nodeLabels</>也为 NULL。原则上，可以为同一个索引中的某些内部元组使用节点标签而对其他内部节点省略节点标签。
  </para>

<!--==========================orignal english content==========================
  <para>
   When working with an inner tuple having unlabeled nodes, it is an error
   for <function>choose</> to return <literal>spgAddNode</>, since the set
   of nodes is supposed to be fixed in such cases.
  </para>
____________________________________________________________________________-->
  <para>
   在处理具有无标签节点的内部元组时，让<function>choose</>返回<literal>spgAddNode</>是一种错误，
   因为该节点集合在这种情况下被假定为固定的集合。
  </para>
 </sect2>

 <sect2 id="spgist-all-the-same">
<!--==========================orignal english content==========================
  <title><quote>All-the-same</> Inner Tuples</title>
____________________________________________________________________________-->
  <title><quote>All-the-same</>内部元组</title>

<!--==========================orignal english content==========================
  <para>
   The <acronym>SP-GiST</acronym> core can override the results of the
   operator class's <function>picksplit</> function when
   <function>picksplit</> fails to divide the supplied leaf values into
   at least two node categories.  When this happens, the new inner tuple
   is created with multiple nodes that each have the same label (if any)
   that <function>picksplit</> gave to the one node it did use, and the
   leaf values are divided at random among these equivalent nodes.
   The <literal>allTheSame</> flag is set on the inner tuple to warn the
   <function>choose</> and <function>inner_consistent</> functions that the
   tuple does not have the node set that they might otherwise expect.
  </para>
____________________________________________________________________________-->
  <para>
   当<function>picksplit</>无法把提供的叶子值划分成至少两个节点分类，<acronym>SP-GiST</acronym>核心能推翻操作符类的<function>picksplit</>函数的结果。在发生这种情况时，会创建一个新的内部元组，其中有多个节点，每一个节点都有相同的标签（如果有标签），标签是由<function>picksplit</>之前给一个节点用的，并且叶子值会被随机地划分给这些等效的节点中。该内部元组上会设置<literal>allTheSame</>标志以警告<function>choose</>和<function>inner_consistent</>函数该元组不具有它们所期望的节点集合。
  </para>

<!--==========================orignal english content==========================
  <para>
   When dealing with an <literal>allTheSame</> tuple, a <function>choose</>
   result of <literal>spgMatchNode</> is interpreted to mean that the new
   value can be assigned to any of the equivalent nodes; the core code will
   ignore the supplied  <structfield>nodeN</> value and descend into one
   of the nodes at random (so as to keep the tree balanced).  It is an
   error for <function>choose</> to return <literal>spgAddNode</>, since
   that would make the nodes not all equivalent; the
   <literal>spgSplitTuple</> action must be used if the value to be inserted
   doesn't match the existing nodes.
  </para>
____________________________________________________________________________-->
  <para>
   在处理<literal>allTheSame</>元组时，<function>choose</>函数的结果<literal>spgMatchNode</>会被解释为新值可以被赋值给任一等价的节点。核心代码将忽略提供的<structfield>nodeN</>值并且随机地下降到其中一个节点中（以便保持树平衡）。对<function>choose</>来说，返回<literal>spgAddNode</>是一种错误，因为那会让节点不全部等效。如果要被插入的值不匹配现有的节点，则必须使用<literal>spgSplitTuple</>动作。
  </para>

<!--==========================orignal english content==========================
  <para>
   When dealing with an <literal>allTheSame</> tuple, the
   <function>inner_consistent</> function should return either all or none
   of the nodes as targets for continuing the index search, since they are
   all equivalent.  This may or may not require any special-case code,
   depending on how much the <function>inner_consistent</> function normally
   assumes about the meaning of the nodes.
  </para>
____________________________________________________________________________-->
  <para>
   在处理<literal>allTheSame</>元组时，为了继续索引搜索，<function>inner_consistent</>函数应该返回全部节点或者不返回节点作为目标，因为这些节点都是等效的。根据<function>inner_consistent</>函数对这些节点含义的假定程度，这可能会也可能不会要求任何处理特殊情况的代码。
  </para>
 </sect2>

</sect1>

<sect1 id="spgist-examples">
<!--==========================orignal english content==========================
 <title>Examples</title>
____________________________________________________________________________-->
 <title>例子</title>

<!--==========================orignal english content==========================
 <para>
  The <productname>PostgreSQL</productname> source distribution includes
  several examples of index operator classes for <acronym>SP-GiST</acronym>,
  as described in <xref linkend="spgist-builtin-opclasses-table">.  Look
  into <filename>src/backend/access/spgist/</>
  and <filename>src/backend/utils/adt/</> to see the code.
 </para>
____________________________________________________________________________-->
 <para>
  如<xref linkend="spgist-builtin-opclasses-table">中所述，<productname>PostgreSQL</productname>源代码发布包括多个用于<acronym>SP-GiST</acronym>的索引操作符类的例子。其代码可以看看<filename>src/backend/access/spgist/</>和<filename>src/backend/utils/adt/</>中的文件。
 </para>

</sect1>

</chapter>
