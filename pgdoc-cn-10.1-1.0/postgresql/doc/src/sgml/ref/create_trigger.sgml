<!--
doc/src/sgml/ref/create_trigger.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>transition tables</primary>
  <seealso>ephemeral named relation</seealso>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>转换表</primary>
  <seealso>暂时命名的关系</seealso>
 </indexterm>
 
<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>define a new trigger</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>定义一个新触发器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ CONSTRAINT ] TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="PARAMETER">event</replaceable> [ OR ... ] }
    ON <replaceable class="PARAMETER">table_name</replaceable>
    [ FROM <replaceable class="parameter">referenced_table_name</replaceable> ]
    [ NOT DEFERRABLE | [ DEFERRABLE ] [ INITIALLY IMMEDIATE | INITIALLY DEFERRED ] ]
    [ REFERENCING { { OLD | NEW } TABLE [ AS ] <replaceable class="PARAMETER">transition_relation_name</replaceable> } [ ... ] ]
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ( <replaceable class="PARAMETER">arguments</replaceable> )

<phrase>where <replaceable class="parameter">event</replaceable> can be one of:</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">column_name</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ CONSTRAINT ] TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="PARAMETER">event</replaceable> [ OR ... ] }
    ON <replaceable class="PARAMETER">table_name</replaceable>
    [ FROM <replaceable class="parameter">referenced_table_name</replaceable> ]
    [ NOT DEFERRABLE | [ DEFERRABLE ] [ INITIALLY IMMEDIATE | INITIALLY DEFERRED ] ]
    [ REFERENCING { { OLD | NEW } TABLE [ AS ] <replaceable class="PARAMETER">transition_relation_name</replaceable> } [ ... ] ]
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ( <replaceable class="PARAMETER">arguments</replaceable> )

<phrase>这里的<replaceable class="parameter">event</replaceable>可以是下列之一：</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">column_name</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE TRIGGER</command> creates a new trigger.  The
   trigger will be associated with the specified table, view, or foreign table
   and will execute the specified
   function <replaceable class="parameter">function_name</replaceable> when
   certain operations are performed on that table.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE TRIGGER</command>创建一个新触发器。该触发器将被关联到指定的表、视图或者外部表并且在某些操作在该表上执行时将执行指定的函数<replaceable class="parameter">function_name</replaceable>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The trigger can be specified to fire before the
   operation is attempted on a row (before constraints are checked and
   the <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> is attempted); or after the operation has
   completed (after constraints are checked and the
   <command>INSERT</command>, <command>UPDATE</command>, or
   <command>DELETE</command> has completed); or instead of the operation
   (in the case of inserts, updates or deletes on a view).
   If the trigger fires before or instead of the event, the trigger can skip
   the operation for the current row, or change the row being inserted (for
   <command>INSERT</command> and <command>UPDATE</command> operations
   only). If the trigger fires after the event, all changes, including
   the effects of other triggers, are <quote>visible</quote>
   to the trigger.
  </para>
____________________________________________________________________________-->
  <para>
   该触发器可以被指定为在一行上尝试该操作之前触发（在约束被检查并且<command>INSERT</command>、<command>UPDATE</command>或者<command>DELETE</command>被尝试之前）；也可以在该操作完成之后触发（在约束被检查并且<command>INSERT</command>、<command>UPDATE</command>或者<command>DELETE</command>完成之后）；或者取代该操作（在对一个视图插入、更新或删除的情况中）。如果该触发器在事件之前触发或者取代事件，该触发器可以跳过对当前行的操作或者改变正在被插入的行（只对<command>INSERT</command>以及<command>UPDATE</command>操作）。如果该触发器在事件之后触发，所有更改（包括其他触发器的效果）对该触发器<quote>可见</quote>。
  </para>

<!--==========================orignal english content==========================
  <para>
   A trigger that is marked <literal>FOR EACH ROW</literal> is called
   once for every row that the operation modifies. For example, a
   <command>DELETE</command> that affects 10 rows will cause any
   <literal>ON DELETE</literal> triggers on the target relation to be
   called 10 separate times, once for each deleted row. In contrast, a
   trigger that is marked <literal>FOR EACH STATEMENT</literal> only
   executes once for any given operation, regardless of how many rows
   it modifies (in particular, an operation that modifies zero rows
   will still result in the execution of any applicable <literal>FOR
   EACH STATEMENT</literal> triggers).
  </para>
____________________________________________________________________________-->
  <para>
   一个被标记为<literal>FOR EACH ROW</literal>的触发器会对该操作修改的每一行都调用一次。例如，一个影响 10 行的<command>DELETE</command>将导致在目标关系上的任何<literal>ON DELETE</literal>触发器被独立调用 10 次，也就是为每一个被删除的行调用一次。与此相反，一个被标记为<literal>FOR EACH STATEMENT</literal>的触发器只会为任何给定的操作执行一次，不管该操作修改多少行（特别地，一个修改零行的操作将仍会导致任何可用的<literal>FOR EACH STATEMENT</literal>触发器被执行）。 
  </para>

<!--==========================orignal english content==========================
  <para>
   Triggers that are specified to fire <literal>INSTEAD OF</> the trigger
   event must be marked <literal>FOR EACH ROW</>, and can only be defined
   on views. <literal>BEFORE</> and <literal>AFTER</> triggers on a view
   must be marked as <literal>FOR EACH STATEMENT</>.
  </para>
____________________________________________________________________________-->
  <para>
   被指定为要触发<literal>INSTEAD OF</>触发器事件的触发器必须被标记为<literal>FOR EACH ROW</>，并且只能被定义在视图上。一个视图上的<literal>BEFORE</>和<literal>AFTER</>触发器必须被标记为<literal>FOR EACH STATEMENT</>。
  </para>

<!--==========================orignal english content==========================
  <para>
   In addition, triggers may be defined to fire for
   <command>TRUNCATE</command>, though only
   <literal>FOR EACH STATEMENT</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   此外，触发器可以被定义成为<command>TRUNCATE</command>触发，但只能是<literal>FOR EACH STATEMENT</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The following table summarizes which types of triggers may be used on
   tables, views, and foreign tables:
  </para>
____________________________________________________________________________-->
  <para>
   下面的表格总结了哪些触发器类型可以被用在表、视图和外部表上：
  </para>

  <informaltable id="supported-trigger-types">
   <tgroup cols="4">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>When</entry>
      <entry>Event</entry>
      <entry>Row-level</entry>
      <entry>Statement-level</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>何时</entry>
      <entry>事件</entry>
      <entry>行级</entry>
      <entry>语句级</entry>
     </row>
    </thead>
    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">Tables and foreign tables</entry>
      <entry align="center">Tables, views, and foreign tables</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">表和外部表</entry>
      <entry align="center">表、视图和外部表</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">Tables</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">表</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry align="center" morerows="1"><literal>AFTER</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">Tables and foreign tables</entry>
      <entry align="center">Tables, views, and foreign tables</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center" morerows="1"><literal>AFTER</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">表和外部表</entry>
      <entry align="center">表、视图和外部表</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">Tables</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">表</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">Views</entry>
      <entry align="center">&mdash;</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">视图</entry>
      <entry align="center">&mdash;</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

<!--==========================orignal english content==========================
  <para>
   Also, a trigger definition can specify a Boolean <literal>WHEN</>
   condition, which will be tested to see whether the trigger should
   be fired.  In row-level triggers the <literal>WHEN</> condition can
   examine the old and/or new values of columns of the row.  Statement-level
   triggers can also have <literal>WHEN</> conditions, although the feature
   is not so useful for them since the condition cannot refer to any values
   in the table.
  </para>
____________________________________________________________________________-->
  <para>
   还有，一个触发器定义可以指定一个布尔的<literal>WHEN</>条件，它将被测试来看看该触发器是否应该被触发。在行级触发器中，<literal>WHEN</>条件可以检查该行的列的新旧值。语句级触发器也可以有<literal>WHEN</>条件，尽管该特性对于它们不是很有用（因为条件不能引用表中的任何值）。
  </para>

<!--==========================orignal english content==========================
  <para>
   If multiple triggers of the same kind are defined for the same event,
   they will be fired in alphabetical order by name.
  </para>
____________________________________________________________________________-->
  <para>
   如果有多个同种触发器被定义为相同事件触发，它们将按照名称的字母表顺序被触发。
  </para>

<!--==========================orignal english content==========================
  <para>
   When the <literal>CONSTRAINT</> option is specified, this command creates a
   <firstterm>constraint trigger</>.  This is the same as a regular trigger
   except that the timing of the trigger firing can be adjusted using
   <xref linkend="SQL-SET-CONSTRAINTS">.
   Constraint triggers must be <literal>AFTER ROW</> triggers on plain
   tables (not foreign tables).  They
   can be fired either at the end of the statement causing the triggering
   event, or at the end of the containing transaction; in the latter case they
   are said to be <firstterm>deferred</>.  A pending deferred-trigger firing
   can also be forced to happen immediately by using <command>SET
   CONSTRAINTS</>.  Constraint triggers are expected to raise an exception
   when the constraints they implement are violated.
  </para>
____________________________________________________________________________-->
  <para>
   当<literal>CONSTRAINT</>选项被指定，这个命令会创建一个<firstterm>约束触发器</>。这和一个常规触发器相同，不过触发该触发器的时机可以使用<xref linkend="SQL-SET-CONSTRAINTS">调整。约束触发器必须是普通表（不是外部表）上的<literal>AFTER ROW</>触发器。它们可以在导致触发器事件的语句末尾被引发或者在包含该语句的事务末尾被引发。在后一种情况中，它们被称作是被<firstterm>延迟</>。一个待处理的延迟触发器的引发也可以使用<command>SET CONSTRAINTS</>立即强制发生。当约束触发器实现的约束被违背时，约束触发器应该抛出一个异常。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>REFERENCING</> option enables collection
   of <firstterm>transition relations</>, which are row sets that include all
   of the rows inserted, deleted, or modified by the current SQL statement.
   This feature lets the trigger see a global view of what the statement did,
   not just one row at a time.  This option is only allowed for
   an <literal>AFTER</> trigger that is not a constraint trigger; also, if
   the trigger is an <literal>UPDATE</> trigger, it must not specify
   a <replaceable class="parameter">column_name</replaceable> list.
   <literal>OLD TABLE</> may only be specified once, and only for a trigger
   that can fire on <literal>UPDATE</> or <literal>DELETE</>; it creates a
   transition relation containing the <firstterm>before-images</> of all rows
   updated or deleted by the statement.
   Similarly, <literal>NEW TABLE</> may only be specified once, and only for
   a trigger that can fire on <literal>UPDATE</> or <literal>INSERT</>;
   it creates a transition relation containing the <firstterm>after-images</>
   of all rows updated or inserted by the statement.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>REFERENCING</>选项可以收集<firstterm>转换关系</>，
   它们是包含由当前SQL语句插入、删除或修改的所有行的行集。
   此功能可让触发器查看语句所做的操作的全局视图，而不是一次一行。
   该选项仅适用于不是约束触发器的<literal>AFTER</>触发器；另外，
   如果触发器是一个<literal>UPDATE</>触发器，它不能指定一个
   <replaceable class="parameter">column_name</replaceable>列表。
   <literal>OLD TABLE</>只能指定一次，并且只能用于触发<literal>UPDATE</>
   或<literal>DELETE</>的触发器；它会创建一个包含由语句更新或删除的所有行的
   <firstterm>before-images</>的转换关系。同样，<literal>NEW TABLE</>只能指定一次，
   并且只能针对可以在<literal>UPDATE</>或<literal>INSERT</>上触发的触发器；
   它会创建一个包含由语句更新或插入的所有行的<firstterm>after-images</>的转换关系。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>SELECT</command> does not modify any rows so you cannot
   create <command>SELECT</command> triggers.  Rules and views may provide
   workable solutions to problems that seem to need <command>SELECT</command>
   triggers.
  </para>
____________________________________________________________________________-->
  <para>
   <command>SELECT</command>不修改任何行，因此你无法创建<command>SELECT</command>触发器。
   规则和视图可以为似乎需要<command>SELECT</command>触发器的问题提供可行的解决方案。
  </para>

<!--==========================orignal english content==========================
  <para>
   Refer to <xref linkend="triggers"> for more information about triggers.
  </para>
____________________________________________________________________________-->
  <para>
   关于触发器的更多信息请见<xref linkend="triggers">。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name to give the new trigger.  This must be distinct from
      the name of any other trigger for the same table.
      The name cannot be schema-qualified &mdash; the trigger inherits the
      schema of its table.  For a constraint trigger, this is also the name to
      use when modifying the trigger's behavior using
      <command>SET CONSTRAINTS</>.
     </para>
____________________________________________________________________________-->
     <para>
      给新触发器的名称。这必须与同一个表上的任何其他触发器相区别。名称不能是模式限定的 &mdash; 该触发器会继承它所在表的模式。对于一个约束触发器，这也是使用<command>SET CONSTRAINTS</>修改触发器行为时要用到的名字。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>BEFORE</literal></term>
____________________________________________________________________________-->
    <term><literal>BEFORE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>AFTER</literal></term>
____________________________________________________________________________-->
    <term><literal>AFTER</literal></term>
<!--==========================orignal english content==========================
    <term><literal>INSTEAD OF</literal></term>
____________________________________________________________________________-->
    <term><literal>INSTEAD OF</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Determines whether the function is called before, after, or instead of
      the event.  A constraint trigger can only be specified as
      <literal>AFTER</>.
     </para>
____________________________________________________________________________-->
     <para>
      决定该函数是要在事件之前、之后被调用还是会取代该事件。一个约束触发器也能被指定为<literal>AFTER</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">event</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      One of <literal>INSERT</literal>, <literal>UPDATE</literal>,
      <literal>DELETE</literal>, or <literal>TRUNCATE</literal>;
      this specifies the event that will fire the trigger. Multiple
      events can be specified using <literal>OR</literal>, except when
      transition relations are requested.
     </para>
____________________________________________________________________________-->
     <para>
      <literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>或者<literal>TRUNCATE</literal>之一，这指定了将要引发该触发器的事件。多个事件可以用<literal>OR</literal>指定，
	  除非要求转换关系。
     </para>

<!--==========================orignal english content==========================
     <para>
      For <literal>UPDATE</literal> events, it is possible to
      specify a list of columns using this syntax:
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
      The trigger will only fire if at least one of the listed columns
      is mentioned as a target of the <command>UPDATE</> command.
     </para>
____________________________________________________________________________-->
     <para>
      对于<literal>UPDATE</literal>事件，可以使用下面的语法指定一个列的列表：
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
      只有当至少一个被列出的列出现在<command>UPDATE</>命令的更新目标中时，该触发器才会触发。
     </para>

<!--==========================orignal english content==========================
     <para>
      <literal>INSTEAD OF UPDATE</> events do not allow a list of columns.
      A column list cannot be specified when requesting transition relations,
      either.
     </para>
____________________________________________________________________________-->
     <para><literal>INSTEAD OF UPDATE</>事件不允许列的列表。
	 请求转换关系时也不能指定列列表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">table_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of the table, view, or foreign
      table the trigger is for.
     </para>
____________________________________________________________________________-->
     <para>
      要使用该触发器的表、视图或外部表的名称（可能是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="PARAMETER">referenced_table_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="PARAMETER">referenced_table_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The (possibly schema-qualified) name of another table referenced by the
      constraint.  This option is used for foreign-key constraints and is not
      recommended for general use.  This can only be specified for
      constraint triggers.
     </para>
____________________________________________________________________________-->
     <para>
      约束引用的另一个表的名称（可能是模式限定的）。这个选项被用于外键约束并且不推荐用于一般的目的。这只能为约束触发器指定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>DEFERRABLE</literal></term>
____________________________________________________________________________-->
    <term><literal>DEFERRABLE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>NOT DEFERRABLE</literal></term>
____________________________________________________________________________-->
    <term><literal>NOT DEFERRABLE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>INITIALLY IMMEDIATE</literal></term>
____________________________________________________________________________-->
    <term><literal>INITIALLY IMMEDIATE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>INITIALLY DEFERRED</literal></term>
____________________________________________________________________________-->
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The default timing of the trigger.
      See the <xref linkend="SQL-CREATETABLE"> documentation for details of
      these constraint options.  This can only be specified for constraint
      triggers.
     </para>
____________________________________________________________________________-->
     <para>
      该触发器的默认时机。这些约束选项的细节可参考<xref linkend="SQL-CREATETABLE">文档。这只能为约束触发器指定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>REFERENCING</literal></term>
____________________________________________________________________________-->
    <term><literal>REFERENCING</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      This keyword immediately precedes the declaration of one or two
      relation names that provide access to the transition relations of the
      triggering statement.
     </para>
____________________________________________________________________________-->
     <para>
      该关键字紧接在声明一个或两个关系名称之前，
	  该关系名称提供对触发语句的转换关系的访问。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>OLD TABLE</literal></term>
____________________________________________________________________________-->
    <term><literal>OLD TABLE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>NEW TABLE</literal></term>
____________________________________________________________________________-->
    <term><literal>NEW TABLE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      This clause indicates whether the following relation name is for the
      before-image transition relation or the after-image transition
      relation.
     </para>
____________________________________________________________________________-->
     <para>
      该子句指出以下关系名称是用于图像之前转换关系还是图像之后转换关系。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="PARAMETER">transition_relation_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="PARAMETER">transition_relation_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The (unqualified) name to be used within the trigger for this
      transition relation.
     </para>
____________________________________________________________________________-->
     <para>
      此转换关系的触发器中要使用的（非限定）名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>FOR EACH ROW</literal></term>
____________________________________________________________________________-->
    <term><literal>FOR EACH ROW</literal></term>
<!--==========================orignal english content==========================
    <term><literal>FOR EACH STATEMENT</literal></term>
____________________________________________________________________________-->
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      This specifies whether the trigger procedure should be fired
      once for every row affected by the trigger event, or just once
      per SQL statement. If neither is specified, <literal>FOR EACH
      STATEMENT</literal> is the default.  Constraint triggers can only
      be specified <literal>FOR EACH ROW</>.
     </para>
____________________________________________________________________________-->
     <para>
      这指定该触发器过程是应该为该触发器事件影响的每一行被引发一次，还是只为每个 SQL 语句被引发一次。如果都没有被指定，<literal>FOR EACH STATEMENT</literal>会是默认值。约束触发器只能被指定为<literal>FOR EACH ROW</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">condition</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A Boolean expression that determines whether the trigger function
      will actually be executed.  If <literal>WHEN</> is specified, the
      function will only be called if the <replaceable
      class="parameter">condition</replaceable> returns <literal>true</>.
      In <literal>FOR EACH ROW</literal> triggers, the <literal>WHEN</>
      condition can refer to columns of the old and/or new row values
      by writing <literal>OLD.<replaceable
      class="parameter">column_name</replaceable></literal> or
      <literal>NEW.<replaceable
      class="parameter">column_name</replaceable></literal> respectively.
      Of course, <literal>INSERT</> triggers cannot refer to <literal>OLD</>
      and <literal>DELETE</> triggers cannot refer to <literal>NEW</>.
     </para>
____________________________________________________________________________-->
     <para>
      一个决定该触发器函数是否将被实际执行的布尔表达式。如果指定了<literal>WHEN</>，只有<replaceable class="parameter">condition</replaceable>返回<literal>true</>时才会调用该函数。在<literal>FOR EACH ROW</literal>触发器中，<literal>WHEN</>条件可以分别写<literal>OLD.<replaceable class="parameter">column_name</replaceable></literal>或者<literal>NEW.<replaceable class="parameter">column_name</replaceable></literal>来引用列的新旧行值。当然，<literal>INSERT</>触发器不能引用<literal>OLD</>并且<literal>DELETE</>触发器不能引用<literal>NEW</>。
     </para>

<!--==========================orignal english content==========================
     <para><literal>INSTEAD OF</> triggers do not support <literal>WHEN</>
      conditions.
     </para>
____________________________________________________________________________-->
     <para><literal>INSTEAD OF</>触发器不支持<literal>WHEN</>条件。
     </para>

<!--==========================orignal english content==========================
     <para>
      Currently, <literal>WHEN</literal> expressions cannot contain
      subqueries.
     </para>
____________________________________________________________________________-->
     <para>
      当前，<literal>WHEN</literal>表达式不能包含子查询。
     </para>

<!--==========================orignal english content==========================
     <para>
      Note that for constraint triggers, evaluation of the <literal>WHEN</>
      condition is not deferred, but occurs immediately after the row update
      operation is performed. If the condition does not evaluate to true then
      the trigger is not queued for deferred execution.
     </para>
____________________________________________________________________________-->
     <para>
      注意对于约束触发器，对于<literal>WHEN</>条件的计算不会被延迟，而是直接在行更新操作被执行之后立刻发生。如果该条件计算得不到真，那么该触发器就不会被放在延迟执行的队列中。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">function_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A user-supplied function that is declared as taking no arguments
      and returning type <literal>trigger</>, which is executed when
      the trigger fires.
     </para>
____________________________________________________________________________-->
     <para>
      一个用户提供的函数，它被声明为不用参数并且返回类型<literal>trigger</>，当触发器引发时会执行该函数。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">arguments</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An optional comma-separated list of arguments to be provided to
      the function when the trigger is executed.  The arguments are
      literal string constants.  Simple names and numeric constants
      can be written here, too, but they will all be converted to
      strings.  Please check the description of the implementation
      language of the trigger function to find out how these arguments
      can be accessed within the function; it might be different from
      normal function arguments.
     </para>
____________________________________________________________________________-->
     <para>
      一个可选的逗号分隔的参数列表，它在该触发器被执行时会被提供给该函数。参数是字符串常量。简单的名称和数字常量也可以被写在这里，但是它们将全部被转换成字符串。请检查该触发器函数的实现语言的描述来找出在函数内部如何访问这些参数，这可能与普通函数参数不同。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   To create a trigger on a table, the user must have the
   <literal>TRIGGER</literal> privilege on the table.  The user must
   also have <literal>EXECUTE</literal> privilege on the trigger function.
  </para>
____________________________________________________________________________-->
  <para>
   要在一个表上创建一个触发器，用户必须具有该表上的<literal>TRIGGER</literal>特权。用户还必须具有在触发器函数上的<literal>EXECUTE</literal>特权。
  </para>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="sql-droptrigger"> to remove a trigger.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="sql-droptrigger">移除一个触发器。
  </para>

<!--==========================orignal english content==========================
  <para>
   A column-specific trigger (one defined using the <literal>UPDATE OF
   <replaceable>column_name</replaceable></literal> syntax) will fire when any
   of its columns are listed as targets in the <command>UPDATE</>
   command's <literal>SET</> list.  It is possible for a column's value
   to change even when the trigger is not fired, because changes made to the
   row's contents by <literal>BEFORE UPDATE</> triggers are not considered.
   Conversely, a command such as <literal>UPDATE ... SET x = x ...</>
   will fire a trigger on column <literal>x</>, even though the column's
   value did not change.
  </para>
____________________________________________________________________________-->
  <para>
   当一个列相关的触发器（使用<literal>UPDATE OF <replaceable>column_name</replaceable></literal>语法定义的触发器）的列被列为<command>UPDATE</>命令的<literal>SET</>列表目标时，它会被触发。即便该触发器没有被引发，一个列的值也可能改变，因为<literal>BEFORE UPDATE</>触发器对行内容所作的改变不会被考虑。相反，一个诸如<literal>UPDATE ... SET x = x ...</>的命令将引发一个位于列<literal>x</>上的触发器，即便该列的值没有改变。
  </para>

<!--==========================orignal english content==========================
  <para>
   In a <literal>BEFORE</> trigger, the <literal>WHEN</> condition is
   evaluated just before the function is or would be executed, so using
   <literal>WHEN</> is not materially different from testing the same
   condition at the beginning of the trigger function.  Note in particular
   that the <literal>NEW</> row seen by the condition is the current value,
   as possibly modified by earlier triggers.  Also, a <literal>BEFORE</>
   trigger's <literal>WHEN</> condition is not allowed to examine the
   system columns of the <literal>NEW</> row (such as <literal>oid</>),
   because those won't have been set yet.
  </para>
____________________________________________________________________________-->
  <para>
   在一个<literal>BEFORE</>触发器中，<literal>WHEN</>条件正好在函数被或者将被执行之前被计算，因此使用<literal>WHEN</>与在触发器函数的开始测试同一个条件没有实质上的区别。特别注意该条件看到的<literal>NEW</>行是当前值，虽然可能已被早前的触发器所修改。还有，一个<literal>BEFORE</>触发器的<literal>WHEN</>条件不允许检查<literal>NEW</>行的系统列（例如<literal>oid</>），因为那些列还没有被设置。
  </para>

<!--==========================orignal english content==========================
  <para>
   In an <literal>AFTER</> trigger, the <literal>WHEN</> condition is
   evaluated just after the row update occurs, and it determines whether an
   event is queued to fire the trigger at the end of statement.  So when an
   <literal>AFTER</> trigger's <literal>WHEN</> condition does not return
   true, it is not necessary to queue an event nor to re-fetch the row at end
   of statement.  This can result in significant speedups in statements that
   modify many rows, if the trigger only needs to be fired for a few of the
   rows.
  </para>
____________________________________________________________________________-->
  <para>
   在一个<literal>AFTER</>触发器中，<literal>WHEN</>条件正好在行更新发生之后被计算，并且它决定一个事件是否要被放入队列以便在语句的末尾引发该触发器。因此当一个<literal>AFTER</>触发器的<literal>WHEN</>条件不返回真时，没有必要把一个事件放入队列或者在语句末尾重新取得该行。如果触发器只需要为一些行被引发，就能够显著地加快修改很多行的语句的速度。
  </para>

<!--==========================orignal english content==========================
  <para>
   In some cases it is possible for a single SQL command to fire more than
   one kind of trigger.  For instance an <command>INSERT</command> with
   an <literal>ON CONFLICT DO UPDATE</> clause may cause both insert and
   update operations, so it will fire both kinds of triggers as needed.
   The transition relations supplied to triggers are
   specific to their event type; thus an <command>INSERT</command> trigger
   will see only the inserted rows, while an <command>UPDATE</command>
   trigger will see only the updated rows.
  </para>
____________________________________________________________________________-->
  <para>
   在某些情况下，单个SQL命令可能触发多种触发器。例如，一个带有
   <literal>ON CONFLICT DO UPDATE</>子句的<command>INSERT</command>
   可能会导致插入和更新操作，所以它会根据需要触发两种触发器。
   提供给触发器的转换关系特定于其事件类型；因此一个<command>INSERT</command>
   触发器将只能看到插入的行，而一个<command>UPDATE</command>触发器将只能看到更新的行。
  </para>

<!--==========================orignal english content==========================
  <para>
   Row updates or deletions caused by foreign-key enforcement actions, such
   as <literal>ON UPDATE CASCADE</> or <literal>ON DELETE SET NULL</>, are
   treated as part of the SQL command that caused them (note that such
   actions are never deferred).  Relevant triggers on the affected table will
   be fired, so that this provides another way in which a SQL command might
   fire triggers not directly matching its type.  In simple cases, triggers
   that request transition relations will see all changes caused in their
   table by a single original SQL command as a single transition relation.
   However, there are cases in which the presence of an <literal>AFTER ROW</>
   trigger that requests transition relations will cause the foreign-key
   enforcement actions triggered by a single SQL command to be split into
   multiple steps, each with its own transition relation(s).  In such cases,
   any statement-level triggers that are present will be fired once per
   creation of a transition relation set, ensuring that the triggers see
   each affected row in a transition relation once and only once.
  </para>
____________________________________________________________________________-->
  <para>
   由外键执行操作（例如<literal>ON UPDATE CASCADE</>或<literal>ON DELETE SET NULL</>）
   引起的行更新或删除被视为导致它们的SQL命令的一部分（请注意，这样的操作从未推迟）。
   受影响的表上的相关触发器将被触发，
   这样可以提供SQL命令可能触发不直接匹配其类型的触发器的另一种方式。在简单情况下，
   请求转换关系的触发器会将单个原始SQL命令在其表中引起的所有更改视为单个转换关系。
   但是，在某些情况下，请求转换关系的<literal>AFTER ROW</>
   触发器的存在会导致由单个SQL命令触发的外键执行操作分为多个步骤，
   每个步骤都有自己的转换关系。在这种情况下，每创建一个转换关系集时，
   将触发一次任何存在的语句级触发器，以确保触发器在转换关系中查看每个受影响的行一次且仅一次。
  </para>

<!--==========================orignal english content==========================
  <para>
    Modifying a partitioned table or a table with inheritance children fires
    statement-level triggers directly attached to that table, but not
    statement-level triggers for its partitions or child tables.  In contrast,
    row-level triggers are fired for all affected partitions or child tables.
    If a statement-level trigger has been defined with transition relations
    named by a <literal>REFERENCING</literal> clause, then before and after
    images of rows are visible from all affected partitions or child tables.
    In the case of inheritance children, the row images include only columns
    that are present in the table that the trigger is attached to.  Currently,
    row-level triggers with transition relations cannot be defined on
    partitions or inheritance child tables.
  </para>
____________________________________________________________________________-->
  <para>
    使用继承子表修改分区表或表会触发直接附加到该表的语句级触发器，
	但不触发其分区或子表的语句级触发器。相比之下，
	所有受影响的分区或子表都会触发行级触发器。如果语句级触发器已用由
	<literal>REFERENCING</literal>子句命名的转换关系定义，
	则在所有受影响的分区或子表中可以看到行的之前图像和之后图像。在继承子表的情况下，
	行图像仅包含触发器附加到的表中存在的列。目前，
	无法在分区或继承子表上定义具有转换关系的行级触发器。
  </para>

<!--==========================orignal english content==========================
  <para>
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare trigger functions as returning the placeholder
   type <type>opaque</>, rather than <type>trigger</>.  To support loading
   of old dump files, <command>CREATE TRIGGER</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>trigger</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname> 7.3 以前的版本中，必须要声明触发器函数为返回占位符类型<type>opaque</>而不是<type>trigger</>。要支持载入旧的转储文件，<command>CREATE TRIGGER</>将接受一个被声明为返回<type>opaque</>的函数，但是它会发出一个通知并且会把该函数的声明返回类型改为<type>trigger</>。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
  <para>
   Execute the function <function>check_account_update</> whenever
   a row of the table <literal>accounts</> is about to be updated:

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   The same, but only execute the function if column <literal>balance</>
   is specified as a target in the <command>UPDATE</> command:

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   This form only executes the function if column <literal>balance</>
   has in fact changed value:

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   Call a function to log updates of <literal>accounts</>, but only if
   something changed:

<programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE PROCEDURE log_account_update();
</programlisting>

   Execute the function <function>view_insert_row</> for each row to insert
   rows into the tables underlying a view:

<programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
</programlisting>

   Execute the function <function>check_transfer_balances_to_zero</> for each
   statement to confirm that the <literal>transfer</> rows offset to a net of
   zero:

<programlisting>
CREATE TRIGGER transfer_insert
    AFTER INSERT ON transfer
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE PROCEDURE check_transfer_balances_to_zero();
</programlisting>

   Execute the function <function>check_matching_pairs</> for each row to
   confirm that changes are made to matching pairs at the same time (by the
   same statement):

<programlisting>
CREATE TRIGGER paired_items_update
    AFTER UPDATE ON paired_items
    REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab
    FOR EACH ROW
    EXECUTE PROCEDURE check_matching_pairs();
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   只要表<literal>accounts</>的一行即将要被更新时会执行函数<function>check_account_update</>：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   下面的例子与上面一个例子相同，但是只在<command>UPDATE</>命令指定要更新<literal>balance</>列时才执行该函数：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   这种形式只有列<literal>balance</>具有真正被改变的值时才执行该函数：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   调用一个函数来记录<literal>accounts</>的更新，但是只在有东西被改变时才调用：

<programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE PROCEDURE log_account_update();
</programlisting>

   为每一个要插入到视图底层表中的行执行函数<function>view_insert_row</>：

<programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
</programlisting>

   为每个语句执行函数<function>check_transfer_balances_to_zero</>，
   以确认<literal>transfer</>行的偏移量为零：

<programlisting>
CREATE TRIGGER transfer_insert
    AFTER INSERT ON transfer
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE PROCEDURE check_transfer_balances_to_zero();
</programlisting>

   为每一行执行函数<function>check_matching_pairs</>
   以确认在同一时间对匹配对进行了更改（使用同一语句）：

<programlisting>
CREATE TRIGGER paired_items_update
    AFTER UPDATE ON paired_items
    REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab
    FOR EACH ROW
    EXECUTE PROCEDURE check_matching_pairs();
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   <xref linkend="trigger-example"> contains a complete example of a trigger
   function written in C.
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="trigger-example">包含一个用 C 编写的触发器函数的完整例子。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-compatibility">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>
  
  <!--
   It's not clear whether SQL/MED contemplates triggers on foreign tables.
   Its <drop basic column definition> General Rules do mention the possibility
   of a reference from a trigger column list.  On the other hand, nothing
   overrides the fact that CREATE TRIGGER only targets base tables.  For now,
   do not document the compatibility status of triggers on foreign tables.
  -->

<!--==========================orignal english content==========================
  <para>
   The <command>CREATE TRIGGER</command> statement in
   <productname>PostgreSQL</productname> implements a subset of the
   <acronym>SQL</> standard. The following functionalities are currently
   missing:

   <itemizedlist>
    <listitem>
     <para>
      While transition table names for <literal>AFTER</> triggers are
      specified using the <literal>REFERENCING</> clause in the standard way,
      the row variables used in <literal>FOR EACH ROW</> triggers may not be
      specified in a <literal>REFERENCING</> clause.  They are available in a
      manner that is dependent on the language in which the trigger function
      is written, but is fixed for any one language.  Some languages
      effectively behave as though there is a <literal>REFERENCING</> clause
      containing <literal>OLD ROW AS OLD NEW ROW AS NEW</>.
     </para>
    </listitem>

    <listitem>
     <para>
      The standard allows transition tables to be used with
      column-specific <literal>UPDATE</> triggers, but then the set of rows
      that should be visible in the transition tables depends on the
      trigger's column list.  This is not currently implemented by
      <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname> only allows the execution
      of a user-defined function for the triggered action.  The standard
      allows the execution of a number of other SQL commands, such as
      <command>CREATE TABLE</command>, as the triggered action.  This
      limitation is not hard to work around by creating a user-defined
      function that executes the desired commands.
     </para>
    </listitem>

   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>中的<command>CREATE TRIGGER</command>语句实现了<acronym>SQL</>标准的一个子集。目前缺少下列功能：

   <itemizedlist>
    <listitem>
     <para>
      虽然<literal>AFTER</>触发器的转换表名称是使用标准方式的<literal>REFERENCING</>
	  子句指定的，但可以不在<literal>REFERENCING</>子句中指定<literal>FOR EACH ROW</>
	  触发器中使用的行变量。它们的可用方式取决于编写触发器函数的语言，
	  但对于任何一种语言都是固定的。有些语言的行为好像有一个包含
	  <literal>OLD ROW AS OLD NEW ROW AS NEW</>的<literal>REFERENCING</>子句。
     </para>
    </listitem>

    <listitem>
     <para>
      该标准允许转换表与列特定的<literal>UPDATE</>触发器一起使用，
	  但是那些在转换表中应该可见的行集取决于触发器的列列表。
	  这当前不是由<productname>PostgreSQL</productname>实现的。
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</productname>只允许为被触发动作执行一个用户定义的函数。标准允许执行许多其他的 SQL 命令作为被触发的动作，例如<command>CREATE TABLE</command>。这种限制可以很容易地通过创建一个执行想要的命令的用户定义函数来绕过。
     </para>
    </listitem>

   </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   SQL specifies that multiple triggers should be fired in
   time-of-creation order.  <productname>PostgreSQL</productname> uses
   name order, which was judged to be more convenient.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 指定多个触发器应该以被创建时间的顺序触发。<productname>PostgreSQL</productname>则使用名称顺序，这被认为更加方便。
  </para>

<!--==========================orignal english content==========================
  <para>
   SQL specifies that <literal>BEFORE DELETE</literal> triggers on cascaded
   deletes fire <emphasis>after</> the cascaded <literal>DELETE</> completes.
   The <productname>PostgreSQL</productname> behavior is for <literal>BEFORE
   DELETE</literal> to always fire before the delete action, even a cascading
   one.  This is considered more consistent.  There is also nonstandard
   behavior if <literal>BEFORE</literal> triggers modify rows or prevent
   updates during an update that is caused by a referential action.  This can
   lead to constraint violations or stored data that does not honor the
   referential constraint.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 指定级联删除上的<literal>BEFORE DELETE</literal>触发器在级联的<literal>DELETE</>完成<emphasis>之后</>引发。<productname>PostgreSQL</productname>的行为则是<literal>BEFORE DELETE</literal>总是在删除动作之前引发，即使是一个级联删除。这被认为更加一致。 如果<literal>BEFORE</literal>触发器修改行或者在引用动作引起的更新期间阻止更新，这也是非标准行为。这能导致约束违背或者被存储的数据不遵从引用约束。
  </para>

<!--==========================orignal english content==========================
  <para>
   The ability to specify multiple actions for a single trigger using
   <literal>OR</literal> is a <productname>PostgreSQL</> extension of
   the SQL standard.
  </para>
____________________________________________________________________________-->
  <para>
   使用<literal>OR</literal>为一个单一触发器指定多个动作的能力是 SQL 标准的一个<productname>PostgreSQL</>扩展。
  </para>

<!--==========================orignal english content==========================
  <para>
   The ability to fire triggers for <command>TRUNCATE</command> is a
   <productname>PostgreSQL</> extension of the SQL standard, as is the
   ability to define statement-level triggers on views.
  </para>
____________________________________________________________________________-->
  <para>
   为<command>TRUNCATE</command>引发触发器的能力是 SQL 标准的一个<productname>PostgreSQL</>扩展，在视图上定义语句级触发器的能力也是一样。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE CONSTRAINT TRIGGER</command> is a
   <productname>PostgreSQL</productname> extension of the <acronym>SQL</>
   standard.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE CONSTRAINT TRIGGER</command>是<acronym>SQL</>标准的一个<productname>PostgreSQL</productname>扩展。
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertrigger"></member>
   <member><xref linkend="sql-droptrigger"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-set-constraints"></member>
  </simplelist>
 </refsect1>
</refentry>
